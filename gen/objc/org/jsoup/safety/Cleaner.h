//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jsoup/src/main/java/org/jsoup/safety/Cleaner.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJsoupSafetyCleaner")
#ifdef RESTRICT_OrgJsoupSafetyCleaner
#define INCLUDE_ALL_OrgJsoupSafetyCleaner 0
#else
#define INCLUDE_ALL_OrgJsoupSafetyCleaner 1
#endif
#undef RESTRICT_OrgJsoupSafetyCleaner

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJsoupSafetyCleaner_) && (INCLUDE_ALL_OrgJsoupSafetyCleaner || defined(INCLUDE_OrgJsoupSafetyCleaner))
#define OrgJsoupSafetyCleaner_

@class OrgJsoupNodesDocument;
@class OrgJsoupSafetyWhitelist;

/*!
 @brief The whitelist based HTML cleaner.Use to ensure that end-user provided HTML contains only the elements and attributes
  that you are expecting; no junk, and no cross-site scripting attacks!
 <p>
  The HTML cleaner parses the input as HTML and then runs it through a white-list, so the output HTML can only contain
  HTML that is allowed by the whitelist. 
 </p>
  <p>
  It is assumed that the input HTML is a body fragment; the clean methods only pull from the source's body, and the
  canned white-lists only allow body contained tags. 
 </p>
  <p>
  Rather than interacting directly with a Cleaner object, generally see the <code>clean</code> methods in <code>org.jsoup.Jsoup</code>.
  </p>
 */
@interface OrgJsoupSafetyCleaner : NSObject

#pragma mark Public

/*!
 @brief Create a new cleaner, that sanitizes documents using the supplied whitelist.
 @param whitelist white-list to clean with
 */
- (instancetype __nonnull)initWithOrgJsoupSafetyWhitelist:(OrgJsoupSafetyWhitelist *)whitelist;

/*!
 @brief Creates a new, clean document, from the original dirty document, containing only elements allowed by the whitelist.
 The original document is not modified. Only elements from the dirt document's <code>body</code> are used.
 @param dirtyDocument Untrusted base document to clean.
 @return cleaned document.
 */
- (OrgJsoupNodesDocument *)cleanWithOrgJsoupNodesDocument:(OrgJsoupNodesDocument *)dirtyDocument;

/*!
 @brief Determines if the input document is valid, against the whitelist.It is considered valid if all the tags and attributes
      in the input HTML are allowed by the whitelist.
 <p>
      This method can be used as a validator for user input forms. An invalid document will still be cleaned successfully
      using the <code>clean(Document)</code> document. If using as a validator, it is recommended to still clean the document
      to ensure enforced attributes are set correctly, and that the output is tidied.     
 </p>
 @param dirtyDocument document to test
 @return true if no tags or attributes need to be removed; false if they do
 */
- (jboolean)isValidWithOrgJsoupNodesDocument:(OrgJsoupNodesDocument *)dirtyDocument;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupSafetyCleaner)

FOUNDATION_EXPORT void OrgJsoupSafetyCleaner_initWithOrgJsoupSafetyWhitelist_(OrgJsoupSafetyCleaner *self, OrgJsoupSafetyWhitelist *whitelist);

FOUNDATION_EXPORT OrgJsoupSafetyCleaner *new_OrgJsoupSafetyCleaner_initWithOrgJsoupSafetyWhitelist_(OrgJsoupSafetyWhitelist *whitelist) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupSafetyCleaner *create_OrgJsoupSafetyCleaner_initWithOrgJsoupSafetyWhitelist_(OrgJsoupSafetyWhitelist *whitelist);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupSafetyCleaner)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgJsoupSafetyCleaner")
