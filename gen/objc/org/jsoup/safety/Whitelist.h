//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jsoup/src/main/java/org/jsoup/safety/Whitelist.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJsoupSafetyWhitelist")
#ifdef RESTRICT_OrgJsoupSafetyWhitelist
#define INCLUDE_ALL_OrgJsoupSafetyWhitelist 0
#else
#define INCLUDE_ALL_OrgJsoupSafetyWhitelist 1
#endif
#undef RESTRICT_OrgJsoupSafetyWhitelist
#ifdef INCLUDE_OrgJsoupSafetyWhitelist_Protocol
#define INCLUDE_OrgJsoupSafetyWhitelist_TypedValue 1
#endif
#ifdef INCLUDE_OrgJsoupSafetyWhitelist_AttributeValue
#define INCLUDE_OrgJsoupSafetyWhitelist_TypedValue 1
#endif
#ifdef INCLUDE_OrgJsoupSafetyWhitelist_AttributeKey
#define INCLUDE_OrgJsoupSafetyWhitelist_TypedValue 1
#endif
#ifdef INCLUDE_OrgJsoupSafetyWhitelist_TagName
#define INCLUDE_OrgJsoupSafetyWhitelist_TypedValue 1
#endif

#if !defined (OrgJsoupSafetyWhitelist_) && (INCLUDE_ALL_OrgJsoupSafetyWhitelist || defined(INCLUDE_OrgJsoupSafetyWhitelist))
#define OrgJsoupSafetyWhitelist_

@class IOSObjectArray;
@class OrgJsoupNodesAttribute;
@class OrgJsoupNodesAttributes;
@class OrgJsoupNodesElement;

/*!
 @brief Whitelists define what HTML (elements and attributes) to allow through the cleaner.Everything else is removed.
 <p>
  Start with one of the defaults: 
 </p>
  <ul>
  <li><code>none</code>
  <li><code>simpleText</code>
  <li><code>basic</code>
  <li><code>basicWithImages</code>
  <li><code>relaxed</code>
  </ul>
  <p>
  If you need to allow more through (please be careful!), tweak a base whitelist with: 
 </p>
  <ul>
  <li><code>addTags</code>
  <li><code>addAttributes</code>
  <li><code>addEnforcedAttribute</code>
  <li><code>addProtocols</code>
  </ul>
  <p>
  You can remove any setting from an existing whitelist with: 
 </p>
  <ul>
  <li><code>removeTags</code>
  <li><code>removeAttributes</code>
  <li><code>removeEnforcedAttribute</code>
  <li><code>removeProtocols</code>
  </ul>
   
 <p>
  The cleaner and these whitelists assume that you want to clean a <code>body</code> fragment of HTML (to add user
  supplied HTML into a templated page), and not to clean a full HTML document. If the latter is the case, either wrap the
  document HTML around the cleaned body HTML, or create a whitelist that allows <code>html</code> and <code>head</code>
  elements as appropriate. 
 </p>
  <p>
  If you are going to extend a whitelist, please be very careful. Make sure you understand what attributes may lead to
  XSS attack vectors. URL attributes are particularly vulnerable and require careful validation. See 
  http://ha.ckers.org/xss.html for some XSS attack examples. 
 </p>
 @author Jonathan Hedley
 */
@interface OrgJsoupSafetyWhitelist : NSObject

#pragma mark Public

/*!
 @brief Create a new, empty whitelist.Generally it will be better to start with a default prepared whitelist instead.
 - seealso: #basic()
 - seealso: #basicWithImages()
 - seealso: #simpleText()
 - seealso: #relaxed()
 */
- (instancetype)init;

/*!
 @brief Add a list of allowed attributes to a tag.
 (If an attribute is not allowed on an element, it will be removed.)
      <p>
      E.g.: <code>addAttributes("a", "href", "class")</code> allows <code>href</code> and <code>class</code> attributes
      on <code>a</code> tags.
      </p>
      <p>
      To make an attribute valid for <b>all tags</b>, use the pseudo tag <code>:all</code>, e.g.
      <code>addAttributes(":all", "class")</code>.
      </p>
 @param tag The tag the attributes are for. The tag will be added to the allowed tag list if necessary.
 @param keys List of valid attributes for the tag
 @return this (for chaining)
 */
- (OrgJsoupSafetyWhitelist *)addAttributesWithNSString:(NSString *)tag
                                     withNSStringArray:(IOSObjectArray *)keys;

/*!
 @brief Add an enforced attribute to a tag.An enforced attribute will always be added to the element.
 If the element
      already has the attribute set, it will be overridden.     
 <p>
      E.g.: <code>addEnforcedAttribute("a", "rel", "nofollow")</code> will make all <code>a</code> tags output as
      <code>&lt;a href="..." rel="nofollow"&gt;</code>
      </p>
 @param tag The tag the enforced attribute is for. The tag will be added to the allowed tag list if necessary.
 @param key The attribute key
 @param value The enforced attribute value
 @return this (for chaining)
 */
- (OrgJsoupSafetyWhitelist *)addEnforcedAttributeWithNSString:(NSString *)tag
                                                 withNSString:(NSString *)key
                                                 withNSString:(NSString *)value;

/*!
 @brief Add allowed URL protocols for an element's URL attribute.This restricts the possible values of the attribute to
      URLs with the defined protocol.
 <p>
      E.g.: <code>addProtocols("a", "href", "ftp", "http", "https")</code>
      </p>
      <p>
      To allow a link to an in-page URL anchor (i.e. <code>&lt;a href="#anchor"&gt;</code>, add a <code>#</code>:<br>
      E.g.: <code>addProtocols("a", "href", "#")</code>
      </p>
 @param tag Tag the URL protocol is for
 @param key Attribute key
 @param protocols List of valid protocols
 @return this, for chaining
 */
- (OrgJsoupSafetyWhitelist *)addProtocolsWithNSString:(NSString *)tag
                                         withNSString:(NSString *)key
                                    withNSStringArray:(IOSObjectArray *)protocols;

/*!
 @brief Add a list of allowed elements to a whitelist.
 (If a tag is not allowed, it will be removed from the HTML.)
 @param tags tag names to allow
 @return this (for chaining)
 */
- (OrgJsoupSafetyWhitelist *)addTagsWithNSStringArray:(IOSObjectArray *)tags;

/*!
 @brief <p>
      This whitelist allows a fuller range of text nodes: <code>a, b, blockquote, br, cite, code, dd, dl, dt, em, i, li,
      ol, p, pre, q, small, span, strike, strong, sub, sup, u, ul</code>, and appropriate attributes.
 </p>
      <p>
      Links (<code>a</code> elements) can point to <code>http, https, ftp, mailto</code>, and have an enforced
      <code>rel=nofollow</code> attribute.
      </p>
      <p>
      Does not allow images.     
 </p>
 @return whitelist
 */
+ (OrgJsoupSafetyWhitelist *)basic;

/*!
 @brief This whitelist allows the same text tags as <code>basic</code>, and also allows <code>img</code> tags, with appropriate
      attributes, with <code>src</code> pointing to <code>http</code> or <code>https</code>.
 @return whitelist
 */
+ (OrgJsoupSafetyWhitelist *)basicWithImages;

/*!
 @brief This whitelist allows only text nodes: all HTML will be stripped.
 @return whitelist
 */
+ (OrgJsoupSafetyWhitelist *)none;

/*!
 @brief Configure this Whitelist to preserve relative links in an element's URL attribute, or convert them to absolute
  links.By default, this is <b>false</b>: URLs will be  made absolute (e.g. start with an allowed protocol, like
  e.g.
 <code>http://</code>.
  <p>
  Note that when handling relative links, the input document must have an appropriate <code>base URI</code> set when
  parsing, so that the link's protocol can be confirmed. Regardless of the setting of the <code>preserve relative
  links</code>
  option, the link must be resolvable against the base URI to an allowed protocol; otherwise the attribute
  will be removed. 
 </p>
 @param preserve<code>true</code>  to allow relative links, <code>false</code>  (default) to deny
 @return this Whitelist, for chaining.
 - seealso: #addProtocols
 */
- (OrgJsoupSafetyWhitelist *)preserveRelativeLinksWithBoolean:(jboolean)preserve;

/*!
 @brief This whitelist allows a full range of text and structural body HTML: <code>a, b, blockquote, br, caption, cite,
      code, col, colgroup, dd, div, dl, dt, em, h1, h2, h3, h4, h5, h6, i, img, li, ol, p, pre, q, small, span, strike, strong, sub,
      sup, table, tbody, td, tfoot, th, thead, tr, u, ul</code>
 <p>
      Links do not have an enforced <code>rel=nofollow</code> attribute, but you can add that if desired.
 </p>
 @return whitelist
 */
+ (OrgJsoupSafetyWhitelist *)relaxed;

/*!
 @brief Remove a list of allowed attributes from a tag.
 (If an attribute is not allowed on an element, it will be removed.)
      <p>
      E.g.: <code>removeAttributes("a", "href", "class")</code> disallows <code>href</code> and <code>class</code>
      attributes on <code>a</code> tags.
      </p>
      <p>
      To make an attribute invalid for <b>all tags</b>, use the pseudo tag <code>:all</code>, e.g.
      <code>removeAttributes(":all", "class")</code>.
      </p>
 @param tag The tag the attributes are for.
 @param keys List of invalid attributes for the tag
 @return this (for chaining)
 */
- (OrgJsoupSafetyWhitelist *)removeAttributesWithNSString:(NSString *)tag
                                        withNSStringArray:(IOSObjectArray *)keys;

/*!
 @brief Remove a previously configured enforced attribute from a tag.
 @param tag The tag the enforced attribute is for.
 @param key The attribute key
 @return this (for chaining)
 */
- (OrgJsoupSafetyWhitelist *)removeEnforcedAttributeWithNSString:(NSString *)tag
                                                    withNSString:(NSString *)key;

/*!
 @brief Remove allowed URL protocols for an element's URL attribute.
 <p>
      E.g.: <code>removeProtocols("a", "href", "ftp")</code>
      </p>
 @param tag Tag the URL protocol is for
 @param key Attribute key
 @param protocols List of invalid protocols
 @return this, for chaining
 */
- (OrgJsoupSafetyWhitelist *)removeProtocolsWithNSString:(NSString *)tag
                                            withNSString:(NSString *)key
                                       withNSStringArray:(IOSObjectArray *)protocols;

/*!
 @brief Remove a list of allowed elements from a whitelist.
 (If a tag is not allowed, it will be removed from the HTML.)
 @param tags tag names to disallow
 @return this (for chaining)
 */
- (OrgJsoupSafetyWhitelist *)removeTagsWithNSStringArray:(IOSObjectArray *)tags;

/*!
 @brief This whitelist allows only simple text formatting: <code>b, em, i, strong, u</code>.All other HTML (tags and
      attributes) will be removed.
 @return whitelist
 */
+ (OrgJsoupSafetyWhitelist *)simpleText;

#pragma mark Protected

/*!
 @brief Test if the supplied attribute is allowed by this whitelist for this tag
 @param tagName tag to consider allowing the attribute in
 @param el element under test, to confirm protocol
 @param attr attribute under test
 @return true if allowed
 */
- (jboolean)isSafeAttributeWithNSString:(NSString *)tagName
               withOrgJsoupNodesElement:(OrgJsoupNodesElement *)el
             withOrgJsoupNodesAttribute:(OrgJsoupNodesAttribute *)attr;

/*!
 @brief Test if the supplied tag is allowed by this whitelist
 @param tag test tag
 @return true if allowed
 */
- (jboolean)isSafeTagWithNSString:(NSString *)tag;

#pragma mark Package-Private

- (OrgJsoupNodesAttributes *)getEnforcedAttributesWithNSString:(NSString *)tagName;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupSafetyWhitelist)

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist *OrgJsoupSafetyWhitelist_none(void);

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist *OrgJsoupSafetyWhitelist_simpleText(void);

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist *OrgJsoupSafetyWhitelist_basic(void);

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist *OrgJsoupSafetyWhitelist_basicWithImages(void);

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist *OrgJsoupSafetyWhitelist_relaxed(void);

FOUNDATION_EXPORT void OrgJsoupSafetyWhitelist_init(OrgJsoupSafetyWhitelist *self);

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist *new_OrgJsoupSafetyWhitelist_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist *create_OrgJsoupSafetyWhitelist_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupSafetyWhitelist)

#endif

#if !defined (OrgJsoupSafetyWhitelist_TypedValue_) && (INCLUDE_ALL_OrgJsoupSafetyWhitelist || defined(INCLUDE_OrgJsoupSafetyWhitelist_TypedValue))
#define OrgJsoupSafetyWhitelist_TypedValue_

@interface OrgJsoupSafetyWhitelist_TypedValue : NSObject

#pragma mark Public

- (jboolean)isEqual:(id)obj;

- (NSUInteger)hash;

- (NSString *)description;

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupSafetyWhitelist_TypedValue)

FOUNDATION_EXPORT void OrgJsoupSafetyWhitelist_TypedValue_initWithNSString_(OrgJsoupSafetyWhitelist_TypedValue *self, NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupSafetyWhitelist_TypedValue)

#endif

#if !defined (OrgJsoupSafetyWhitelist_TagName_) && (INCLUDE_ALL_OrgJsoupSafetyWhitelist || defined(INCLUDE_OrgJsoupSafetyWhitelist_TagName))
#define OrgJsoupSafetyWhitelist_TagName_

@interface OrgJsoupSafetyWhitelist_TagName : OrgJsoupSafetyWhitelist_TypedValue

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)value;

+ (OrgJsoupSafetyWhitelist_TagName *)valueOfWithNSString:(NSString *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupSafetyWhitelist_TagName)

FOUNDATION_EXPORT void OrgJsoupSafetyWhitelist_TagName_initWithNSString_(OrgJsoupSafetyWhitelist_TagName *self, NSString *value);

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist_TagName *new_OrgJsoupSafetyWhitelist_TagName_initWithNSString_(NSString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist_TagName *create_OrgJsoupSafetyWhitelist_TagName_initWithNSString_(NSString *value);

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist_TagName *OrgJsoupSafetyWhitelist_TagName_valueOfWithNSString_(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupSafetyWhitelist_TagName)

#endif

#if !defined (OrgJsoupSafetyWhitelist_AttributeKey_) && (INCLUDE_ALL_OrgJsoupSafetyWhitelist || defined(INCLUDE_OrgJsoupSafetyWhitelist_AttributeKey))
#define OrgJsoupSafetyWhitelist_AttributeKey_

@interface OrgJsoupSafetyWhitelist_AttributeKey : OrgJsoupSafetyWhitelist_TypedValue

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)value;

+ (OrgJsoupSafetyWhitelist_AttributeKey *)valueOfWithNSString:(NSString *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupSafetyWhitelist_AttributeKey)

FOUNDATION_EXPORT void OrgJsoupSafetyWhitelist_AttributeKey_initWithNSString_(OrgJsoupSafetyWhitelist_AttributeKey *self, NSString *value);

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist_AttributeKey *new_OrgJsoupSafetyWhitelist_AttributeKey_initWithNSString_(NSString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist_AttributeKey *create_OrgJsoupSafetyWhitelist_AttributeKey_initWithNSString_(NSString *value);

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist_AttributeKey *OrgJsoupSafetyWhitelist_AttributeKey_valueOfWithNSString_(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupSafetyWhitelist_AttributeKey)

#endif

#if !defined (OrgJsoupSafetyWhitelist_AttributeValue_) && (INCLUDE_ALL_OrgJsoupSafetyWhitelist || defined(INCLUDE_OrgJsoupSafetyWhitelist_AttributeValue))
#define OrgJsoupSafetyWhitelist_AttributeValue_

@interface OrgJsoupSafetyWhitelist_AttributeValue : OrgJsoupSafetyWhitelist_TypedValue

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)value;

+ (OrgJsoupSafetyWhitelist_AttributeValue *)valueOfWithNSString:(NSString *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupSafetyWhitelist_AttributeValue)

FOUNDATION_EXPORT void OrgJsoupSafetyWhitelist_AttributeValue_initWithNSString_(OrgJsoupSafetyWhitelist_AttributeValue *self, NSString *value);

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist_AttributeValue *new_OrgJsoupSafetyWhitelist_AttributeValue_initWithNSString_(NSString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist_AttributeValue *create_OrgJsoupSafetyWhitelist_AttributeValue_initWithNSString_(NSString *value);

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist_AttributeValue *OrgJsoupSafetyWhitelist_AttributeValue_valueOfWithNSString_(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupSafetyWhitelist_AttributeValue)

#endif

#if !defined (OrgJsoupSafetyWhitelist_Protocol_) && (INCLUDE_ALL_OrgJsoupSafetyWhitelist || defined(INCLUDE_OrgJsoupSafetyWhitelist_Protocol))
#define OrgJsoupSafetyWhitelist_Protocol_

@interface OrgJsoupSafetyWhitelist_Protocol : OrgJsoupSafetyWhitelist_TypedValue

#pragma mark Package-Private

- (instancetype)initWithNSString:(NSString *)value;

+ (OrgJsoupSafetyWhitelist_Protocol *)valueOfWithNSString:(NSString *)value;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupSafetyWhitelist_Protocol)

FOUNDATION_EXPORT void OrgJsoupSafetyWhitelist_Protocol_initWithNSString_(OrgJsoupSafetyWhitelist_Protocol *self, NSString *value);

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist_Protocol *new_OrgJsoupSafetyWhitelist_Protocol_initWithNSString_(NSString *value) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist_Protocol *create_OrgJsoupSafetyWhitelist_Protocol_initWithNSString_(NSString *value);

FOUNDATION_EXPORT OrgJsoupSafetyWhitelist_Protocol *OrgJsoupSafetyWhitelist_Protocol_valueOfWithNSString_(NSString *value);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupSafetyWhitelist_Protocol)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJsoupSafetyWhitelist")
