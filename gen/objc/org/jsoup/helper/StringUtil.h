//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jsoup/src/main/java/org/jsoup/helper/StringUtil.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJsoupHelperStringUtil")
#ifdef RESTRICT_OrgJsoupHelperStringUtil
#define INCLUDE_ALL_OrgJsoupHelperStringUtil 0
#else
#define INCLUDE_ALL_OrgJsoupHelperStringUtil 1
#endif
#undef RESTRICT_OrgJsoupHelperStringUtil

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJsoupHelperStringUtil_) && (INCLUDE_ALL_OrgJsoupHelperStringUtil || defined(INCLUDE_OrgJsoupHelperStringUtil))
#define OrgJsoupHelperStringUtil_

@class IOSObjectArray;
@class JavaLangStringBuilder;
@class JavaNetURL;
@protocol JavaUtilCollection;
@protocol JavaUtilIterator;

/*!
 @brief A minimal String utility class.Designed for internal jsoup use only.
 */
@interface OrgJsoupHelperStringUtil : NSObject

#pragma mark Public

- (instancetype __nonnull)init;

/*!
 @brief After normalizing the whitespace within a string, appends it to a string builder.
 @param accum builder to append to
 @param string string to normalize whitespace within
 @param stripLeading set to true if you wish to remove any leading whitespace
 */
+ (void)appendNormalisedWhitespaceWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                                               withNSString:(NSString *)string
                                                withBoolean:(jboolean)stripLeading;

+ (jboolean)inWithNSString:(NSString *)needle
         withNSStringArray:(IOSObjectArray *)haystack;

+ (jboolean)inSortedWithNSString:(NSString *)needle
               withNSStringArray:(IOSObjectArray *)haystack;

/*!
 @brief Tests if a string is blank: null, emtpy, or only whitespace (" ", \r\n, \t, etc)
 @param string string to test
 @return if string is blank
 */
+ (jboolean)isBlankWithNSString:(NSString *)string;

/*!
 @brief Tests if a string is numeric, i.e.contains only digit characters
 @param string string to test
 @return true if only digit chars, false if empty or null or contains non-digit chrs
 */
+ (jboolean)isNumericWithNSString:(NSString *)string;

/*!
 @brief Tests if a code point is "whitespace" as defined in the HTML spec.
 @param c code point to test
 @return true if code point is whitespace, false otherwise
 */
+ (jboolean)isWhitespaceWithInt:(jint)c;

/*!
 @brief Join a collection of strings by a seperator
 @param strings collection of string objects
 @param sep string to place between strings
 @return joined string
 */
+ (NSString *)joinWithJavaUtilCollection:(id<JavaUtilCollection>)strings
                            withNSString:(NSString *)sep;

/*!
 @brief Join a collection of strings by a seperator
 @param strings iterator of string objects
 @param sep string to place between strings
 @return joined string
 */
+ (NSString *)joinWithJavaUtilIterator:(id<JavaUtilIterator>)strings
                          withNSString:(NSString *)sep;

/*!
 @brief Normalise the whitespace within this string; multiple spaces collapse to a single, and all whitespace characters
  (e.g.newline, tab) convert to a simple space
 @param string content to normalise
 @return normalised string
 */
+ (NSString *)normaliseWhitespaceWithNSString:(NSString *)string;

/*!
 @brief Returns space padding
 @param width amount of padding desired
 @return string of spaces * width
 */
+ (NSString *)paddingWithInt:(jint)width;

/*!
 @brief Create a new absolute URL, from a provided existing absolute URL and a relative URL component.
 @param baseUrl the existing absolute base URL
 @param relUrl the relative URL to resolve. (If it's already absolute, it will be returned)
 @return an absolute URL if one was able to be generated, or the empty string if not
 */
+ (NSString *)resolveWithNSString:(NSString *)baseUrl
                     withNSString:(NSString *)relUrl;

/*!
 @brief Create a new absolute URL, from a provided existing absolute URL and a relative URL component.
 @param base the existing absolulte base URL
 @param relUrl the relative URL to resolve. (If it's already absolute, it will be returned)
 @return the resolved absolute URL
 @throw MalformedURLExceptionif an error occurred generating the URL
 */
+ (JavaNetURL *)resolveWithJavaNetURL:(JavaNetURL *)base
                         withNSString:(NSString *)relUrl;

@end

J2OBJC_STATIC_INIT(OrgJsoupHelperStringUtil)

FOUNDATION_EXPORT void OrgJsoupHelperStringUtil_init(OrgJsoupHelperStringUtil *self);

FOUNDATION_EXPORT OrgJsoupHelperStringUtil *new_OrgJsoupHelperStringUtil_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupHelperStringUtil *create_OrgJsoupHelperStringUtil_init(void);

FOUNDATION_EXPORT NSString *OrgJsoupHelperStringUtil_joinWithJavaUtilCollection_withNSString_(id<JavaUtilCollection> strings, NSString *sep);

FOUNDATION_EXPORT NSString *OrgJsoupHelperStringUtil_joinWithJavaUtilIterator_withNSString_(id<JavaUtilIterator> strings, NSString *sep);

FOUNDATION_EXPORT NSString *OrgJsoupHelperStringUtil_paddingWithInt_(jint width);

FOUNDATION_EXPORT jboolean OrgJsoupHelperStringUtil_isBlankWithNSString_(NSString *string);

FOUNDATION_EXPORT jboolean OrgJsoupHelperStringUtil_isNumericWithNSString_(NSString *string);

FOUNDATION_EXPORT jboolean OrgJsoupHelperStringUtil_isWhitespaceWithInt_(jint c);

FOUNDATION_EXPORT NSString *OrgJsoupHelperStringUtil_normaliseWhitespaceWithNSString_(NSString *string);

FOUNDATION_EXPORT void OrgJsoupHelperStringUtil_appendNormalisedWhitespaceWithJavaLangStringBuilder_withNSString_withBoolean_(JavaLangStringBuilder *accum, NSString *string, jboolean stripLeading);

FOUNDATION_EXPORT jboolean OrgJsoupHelperStringUtil_inWithNSString_withNSStringArray_(NSString *needle, IOSObjectArray *haystack);

FOUNDATION_EXPORT jboolean OrgJsoupHelperStringUtil_inSortedWithNSString_withNSStringArray_(NSString *needle, IOSObjectArray *haystack);

FOUNDATION_EXPORT JavaNetURL *OrgJsoupHelperStringUtil_resolveWithJavaNetURL_withNSString_(JavaNetURL *base, NSString *relUrl);

FOUNDATION_EXPORT NSString *OrgJsoupHelperStringUtil_resolveWithNSString_withNSString_(NSString *baseUrl, NSString *relUrl);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupHelperStringUtil)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgJsoupHelperStringUtil")
