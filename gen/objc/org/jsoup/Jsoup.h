//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jsoup/src/main/java/org/jsoup/Jsoup.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJsoupJsoup")
#ifdef RESTRICT_OrgJsoupJsoup
#define INCLUDE_ALL_OrgJsoupJsoup 0
#else
#define INCLUDE_ALL_OrgJsoupJsoup 1
#endif
#undef RESTRICT_OrgJsoupJsoup

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJsoupJsoup_) && (INCLUDE_ALL_OrgJsoupJsoup || defined(INCLUDE_OrgJsoupJsoup))
#define OrgJsoupJsoup_

@class JavaIoFile;
@class JavaIoInputStream;
@class JavaNetURL;
@class OrgJsoupNodesDocument;
@class OrgJsoupNodesDocument_OutputSettings;
@class OrgJsoupParserParser;
@class OrgJsoupSafetyWhitelist;
@protocol OrgJsoupConnection;

/*!
 @brief The core public access point to the jsoup functionality.
 @author Jonathan Hedley
 */
@interface OrgJsoupJsoup : NSObject

#pragma mark Public

/*!
 @brief Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted
      tags and attributes.
 @param bodyHtml input untrusted HTML (body fragment)
 @param baseUri URL to resolve relative URLs against
 @param whitelist white-list of permitted HTML elements
 @return safe HTML (body fragment)
 - seealso: Cleaner#clean(Document)
 */
+ (NSString *)cleanWithNSString:(NSString *)bodyHtml
                   withNSString:(NSString *)baseUri
    withOrgJsoupSafetyWhitelist:(OrgJsoupSafetyWhitelist *)whitelist;

/*!
 @brief Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of
  permitted
  tags and attributes.
 @param bodyHtml input untrusted HTML (body fragment)
 @param baseUri URL to resolve relative URLs against
 @param whitelist white-list of permitted HTML elements
 @param outputSettings document output settings; use to control pretty-printing and entity escape modes
 @return safe HTML (body fragment)
 - seealso: Cleaner#clean(Document)
 */
+ (NSString *)cleanWithNSString:(NSString *)bodyHtml
                   withNSString:(NSString *)baseUri
    withOrgJsoupSafetyWhitelist:(OrgJsoupSafetyWhitelist *)whitelist
withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outputSettings;

/*!
 @brief Get safe HTML from untrusted input HTML, by parsing input HTML and filtering it through a white-list of permitted
      tags and attributes.
 @param bodyHtml input untrusted HTML (body fragment)
 @param whitelist white-list of permitted HTML elements
 @return safe HTML (body fragment)
 - seealso: Cleaner#clean(Document)
 */
+ (NSString *)cleanWithNSString:(NSString *)bodyHtml
    withOrgJsoupSafetyWhitelist:(OrgJsoupSafetyWhitelist *)whitelist;

/*!
 @brief Creates a new <code>Connection</code> to a URL.Use to fetch and parse a HTML page.
 <p>
  Use examples: 
 <ul>
   <li><code>Document doc = Jsoup.connect("http://example.com").userAgent("Mozilla").data("name", "jsoup").get();</code></li>
   <li><code>Document doc = Jsoup.connect("http://example.com").cookie("auth", "token").post();</code></li>
  </ul>
 @param url URL to connect to. The protocol must be <code>http</code>  or <code>https</code> .
 @return the connection. You can add data, cookies, and headers; set the user-agent, referrer, method; and then execute.
 */
+ (id<OrgJsoupConnection>)connectWithNSString:(NSString *)url;

/*!
 @brief Test if the input HTML has only tags and attributes allowed by the Whitelist.Useful for form validation.
 The input HTML should
      still be run through the cleaner to set up enforced attributes, and to tidy the output.
 @param bodyHtml HTML to test
 @param whitelist whitelist to test against
 @return true if no tags or attributes were removed; false otherwise
 - seealso: #clean(String, org.jsoup.safety.Whitelist)
 */
+ (jboolean)isValidWithNSString:(NSString *)bodyHtml
    withOrgJsoupSafetyWhitelist:(OrgJsoupSafetyWhitelist *)whitelist;

/*!
 @brief Parse the contents of a file as HTML.The location of the file is used as the base URI to qualify relative URLs.
 @param inArg file to load HTML from
 @param charsetName (optional) character set of file contents. Set to <code>null</code>  to determine from <code>http-equiv</code>  meta tag, if
       present, or fall back to <code>UTF-8</code>  (which is often safe to do).
 @return sane HTML
 @throw IOExceptionif the file could not be found, or read, or if the charsetName is invalid.
 - seealso: #parse(File, String, String)
 */
+ (OrgJsoupNodesDocument *)parseWithJavaIoFile:(JavaIoFile *)inArg
                                  withNSString:(NSString *)charsetName;

/*!
 @brief Parse the contents of a file as HTML.
 @param inArg file to load HTML from
 @param charsetName (optional) character set of file contents. Set to <code>null</code>  to determine from <code>http-equiv</code>  meta tag, if
       present, or fall back to <code>UTF-8</code>  (which is often safe to do).
 @param baseUri The URL where the HTML was retrieved from, to resolve relative links against.
 @return sane HTML
 @throw IOExceptionif the file could not be found, or read, or if the charsetName is invalid.
 */
+ (OrgJsoupNodesDocument *)parseWithJavaIoFile:(JavaIoFile *)inArg
                                  withNSString:(NSString *)charsetName
                                  withNSString:(NSString *)baseUri;

/*!
 @brief Read an input stream, and parse it to a Document.
 @param inArg input stream to read. Make sure to close it after parsing.
 @param charsetName (optional) character set of file contents. Set to <code>null</code>  to determine from <code>http-equiv</code>  meta tag, if
       present, or fall back to <code>UTF-8</code>  (which is often safe to do).
 @param baseUri The URL where the HTML was retrieved from, to resolve relative links against.
 @return sane HTML
 @throw IOExceptionif the file could not be found, or read, or if the charsetName is invalid.
 */
+ (OrgJsoupNodesDocument *)parseWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                         withNSString:(NSString *)charsetName
                                         withNSString:(NSString *)baseUri;

/*!
 @brief Read an input stream, and parse it to a Document.You can provide an alternate parser, such as a simple XML
      (non-HTML) parser.
 @param inArg input stream to read. Make sure to close it after parsing.
 @param charsetName (optional) character set of file contents. Set to <code>null</code>  to determine from <code>http-equiv</code>  meta tag, if
       present, or fall back to <code>UTF-8</code>  (which is often safe to do).
 @param baseUri The URL where the HTML was retrieved from, to resolve relative links against.
 @param parser alternate <code>parser</code>  to use.
 @return sane HTML
 @throw IOExceptionif the file could not be found, or read, or if the charsetName is invalid.
 */
+ (OrgJsoupNodesDocument *)parseWithJavaIoInputStream:(JavaIoInputStream *)inArg
                                         withNSString:(NSString *)charsetName
                                         withNSString:(NSString *)baseUri
                             withOrgJsoupParserParser:(OrgJsoupParserParser *)parser;

/*!
 @brief Parse HTML into a Document.As no base URI is specified, absolute URL detection relies on the HTML including a
      <code><base href></code> tag.
 @param html HTML to parse
 @return sane HTML
 - seealso: #parse(String, String)
 */
+ (OrgJsoupNodesDocument *)parseWithNSString:(NSString *)html;

/*!
 @brief Parse HTML into a Document.The parser will make a sensible, balanced document tree out of any HTML.
 @param html HTML to parse
 @param baseUri The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur      before the HTML declares a 
 <code><base href></code>  tag.
 @return sane HTML
 */
+ (OrgJsoupNodesDocument *)parseWithNSString:(NSString *)html
                                withNSString:(NSString *)baseUri;

/*!
 @brief Parse HTML into a Document, using the provided Parser.You can provide an alternate parser, such as a simple XML
      (non-HTML) parser.
 @param html HTML to parse
 @param baseUri The URL where the HTML was retrieved from. Used to resolve relative URLs to absolute URLs, that occur      before the HTML declares a 
 <code><base href></code>  tag.
 @param parser alternate <code>parser</code>  to use.
 @return sane HTML
 */
+ (OrgJsoupNodesDocument *)parseWithNSString:(NSString *)html
                                withNSString:(NSString *)baseUri
                    withOrgJsoupParserParser:(OrgJsoupParserParser *)parser;

/*!
 @brief Fetch a URL, and parse it as HTML.Provided for compatibility; in most cases use <code>connect(String)</code> instead.
 <p>
      The encoding character set is determined by the content-type header or http-equiv meta tag, or falls back to <code>UTF-8</code>.
 @param url URL to fetch (with a GET). The protocol must be <code>http</code>  or <code>https</code> .
 @param timeoutMillis Connection and read timeout, in milliseconds. If exceeded, IOException is thrown.
 @return The parsed HTML.
 @throw java.net.MalformedURLExceptionif the request URL is not a HTTP or HTTPS URL, or is otherwise malformed
 @throw HttpStatusExceptionif the response is not OK and HTTP response errors are not ignored
 @throw UnsupportedMimeTypeExceptionif the response mime type is not supported and those errors are not ignored
 @throw java.net.SocketTimeoutExceptionif the connection times out
 @throw IOExceptionif a connection or read error occurs
 - seealso: #connect(String)
 */
+ (OrgJsoupNodesDocument *)parseWithJavaNetURL:(JavaNetURL *)url
                                       withInt:(jint)timeoutMillis;

/*!
 @brief Parse a fragment of HTML, with the assumption that it forms the <code>body</code> of the HTML.
 @param bodyHtml body HTML fragment
 @return sane HTML document
 - seealso: Document#body()
 */
+ (OrgJsoupNodesDocument *)parseBodyFragmentWithNSString:(NSString *)bodyHtml;

/*!
 @brief Parse a fragment of HTML, with the assumption that it forms the <code>body</code> of the HTML.
 @param bodyHtml body HTML fragment
 @param baseUri URL to resolve relative URLs against.
 @return sane HTML document
 - seealso: Document#body()
 */
+ (OrgJsoupNodesDocument *)parseBodyFragmentWithNSString:(NSString *)bodyHtml
                                            withNSString:(NSString *)baseUri;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupJsoup)

FOUNDATION_EXPORT OrgJsoupNodesDocument *OrgJsoupJsoup_parseWithNSString_withNSString_(NSString *html, NSString *baseUri);

FOUNDATION_EXPORT OrgJsoupNodesDocument *OrgJsoupJsoup_parseWithNSString_withNSString_withOrgJsoupParserParser_(NSString *html, NSString *baseUri, OrgJsoupParserParser *parser);

FOUNDATION_EXPORT OrgJsoupNodesDocument *OrgJsoupJsoup_parseWithNSString_(NSString *html);

FOUNDATION_EXPORT id<OrgJsoupConnection> OrgJsoupJsoup_connectWithNSString_(NSString *url);

FOUNDATION_EXPORT OrgJsoupNodesDocument *OrgJsoupJsoup_parseWithJavaIoFile_withNSString_withNSString_(JavaIoFile *inArg, NSString *charsetName, NSString *baseUri);

FOUNDATION_EXPORT OrgJsoupNodesDocument *OrgJsoupJsoup_parseWithJavaIoFile_withNSString_(JavaIoFile *inArg, NSString *charsetName);

FOUNDATION_EXPORT OrgJsoupNodesDocument *OrgJsoupJsoup_parseWithJavaIoInputStream_withNSString_withNSString_(JavaIoInputStream *inArg, NSString *charsetName, NSString *baseUri);

FOUNDATION_EXPORT OrgJsoupNodesDocument *OrgJsoupJsoup_parseWithJavaIoInputStream_withNSString_withNSString_withOrgJsoupParserParser_(JavaIoInputStream *inArg, NSString *charsetName, NSString *baseUri, OrgJsoupParserParser *parser);

FOUNDATION_EXPORT OrgJsoupNodesDocument *OrgJsoupJsoup_parseBodyFragmentWithNSString_withNSString_(NSString *bodyHtml, NSString *baseUri);

FOUNDATION_EXPORT OrgJsoupNodesDocument *OrgJsoupJsoup_parseBodyFragmentWithNSString_(NSString *bodyHtml);

FOUNDATION_EXPORT OrgJsoupNodesDocument *OrgJsoupJsoup_parseWithJavaNetURL_withInt_(JavaNetURL *url, jint timeoutMillis);

FOUNDATION_EXPORT NSString *OrgJsoupJsoup_cleanWithNSString_withNSString_withOrgJsoupSafetyWhitelist_(NSString *bodyHtml, NSString *baseUri, OrgJsoupSafetyWhitelist *whitelist);

FOUNDATION_EXPORT NSString *OrgJsoupJsoup_cleanWithNSString_withOrgJsoupSafetyWhitelist_(NSString *bodyHtml, OrgJsoupSafetyWhitelist *whitelist);

FOUNDATION_EXPORT NSString *OrgJsoupJsoup_cleanWithNSString_withNSString_withOrgJsoupSafetyWhitelist_withOrgJsoupNodesDocument_OutputSettings_(NSString *bodyHtml, NSString *baseUri, OrgJsoupSafetyWhitelist *whitelist, OrgJsoupNodesDocument_OutputSettings *outputSettings);

FOUNDATION_EXPORT jboolean OrgJsoupJsoup_isValidWithNSString_withOrgJsoupSafetyWhitelist_(NSString *bodyHtml, OrgJsoupSafetyWhitelist *whitelist);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupJsoup)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgJsoupJsoup")
