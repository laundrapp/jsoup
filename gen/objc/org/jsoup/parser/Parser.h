//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jsoup/src/main/java/org/jsoup/parser/Parser.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJsoupParserParser")
#ifdef RESTRICT_OrgJsoupParserParser
#define INCLUDE_ALL_OrgJsoupParserParser 0
#else
#define INCLUDE_ALL_OrgJsoupParserParser 1
#endif
#undef RESTRICT_OrgJsoupParserParser

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJsoupParserParser_) && (INCLUDE_ALL_OrgJsoupParserParser || defined(INCLUDE_OrgJsoupParserParser))
#define OrgJsoupParserParser_

@class OrgJsoupNodesDocument;
@class OrgJsoupNodesElement;
@class OrgJsoupParserTreeBuilder;
@protocol JavaUtilList;

/*!
 @brief Parses HTML into a <code>org.jsoup.nodes.Document</code>.Generally best to use one of the  more convenient parse methods
  in <code>org.jsoup.Jsoup</code>.
 */
@interface OrgJsoupParserParser : NSObject

#pragma mark Public

/*!
 @brief Create a new Parser, using the specified TreeBuilder
 @param treeBuilder TreeBuilder to use to parse input into Documents.
 */
- (instancetype __nonnull)initWithOrgJsoupParserTreeBuilder:(OrgJsoupParserTreeBuilder *)treeBuilder;

/*!
 @brief Retrieve the parse errors, if any, from the last parse.
 @return list of parse errors, up to the size of the maximum errors tracked.
 */
- (id<JavaUtilList>)getErrors;

/*!
 @brief Get the TreeBuilder currently in use.
 @return current TreeBuilder.
 */
- (OrgJsoupParserTreeBuilder *)getTreeBuilder;

/*!
 @brief Create a new HTML parser.This parser treats input as HTML5, and enforces the creation of a normalised document,
  based on a knowledge of the semantics of the incoming tags.
 @return a new HTML parser.
 */
+ (OrgJsoupParserParser *)htmlParser;

/*!
 @brief Check if parse error tracking is enabled.
 @return current track error state.
 */
- (jboolean)isTrackErrors;

/*!
 @brief Parse HTML into a Document.
 @param html HTML to parse
 @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 @return parsed Document
 */
+ (OrgJsoupNodesDocument *)parseWithNSString:(NSString *)html
                                withNSString:(NSString *)baseUri;

/*!
 @brief Parse a fragment of HTML into the <code>body</code> of a Document.
 @param bodyHtml fragment of HTML
 @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 @return Document, with empty head, and HTML parsed into body
 */
+ (OrgJsoupNodesDocument *)parseBodyFragmentWithNSString:(NSString *)bodyHtml
                                            withNSString:(NSString *)baseUri;

/*!
 @param bodyHtml HTML to parse
 @param baseUri baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 @return parsed Document
 */
+ (OrgJsoupNodesDocument *)parseBodyFragmentRelaxedWithNSString:(NSString *)bodyHtml
                                                   withNSString:(NSString *)baseUri;

/*!
 @brief Parse a fragment of HTML into a list of nodes.The context element, if supplied, supplies parsing context.
 @param fragmentHtml the fragment of HTML to parse
 @param context (optional) the element that this HTML fragment is being parsed for (i.e. for inner HTML). This  provides stack context (for implicit element creation).
 @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 @return list of nodes parsed from the input HTML. Note that the context element, if supplied, is not modified.
 */
+ (id<JavaUtilList>)parseFragmentWithNSString:(NSString *)fragmentHtml
                     withOrgJsoupNodesElement:(OrgJsoupNodesElement *)context
                                 withNSString:(NSString *)baseUri;

- (OrgJsoupNodesDocument *)parseInputWithNSString:(NSString *)html
                                     withNSString:(NSString *)baseUri;

/*!
 @brief Parse a fragment of XML into a list of nodes.
 @param fragmentXml the fragment of XML to parse
 @param baseUri base URI of document (i.e. original fetch location), for resolving relative URLs.
 @return list of nodes parsed from the input XML.
 */
+ (id<JavaUtilList>)parseXmlFragmentWithNSString:(NSString *)fragmentXml
                                    withNSString:(NSString *)baseUri;

/*!
 @brief Enable or disable parse error tracking for the next parse.
 @param maxErrors the maximum number of errors to track. Set to 0 to disable.
 @return this, for chaining
 */
- (OrgJsoupParserParser *)setTrackErrorsWithInt:(jint)maxErrors;

/*!
 @brief Update the TreeBuilder used when parsing content.
 @param treeBuilder current TreeBuilder
 @return this, for chaining
 */
- (OrgJsoupParserParser *)setTreeBuilderWithOrgJsoupParserTreeBuilder:(OrgJsoupParserTreeBuilder *)treeBuilder;

/*!
 @brief Utility method to unescape HTML entities from a string
 @param string HTML escaped string
 @param inAttribute if the string is to be escaped in strict mode (as attributes are)
 @return an unescaped string
 */
+ (NSString *)unescapeEntitiesWithNSString:(NSString *)string
                               withBoolean:(jboolean)inAttribute;

/*!
 @brief Create a new XML parser.This parser assumes no knowledge of the incoming tags and does not treat it as HTML,
  rather creates a simple tree directly from the input.
 @return a new simple XML parser.
 */
+ (OrgJsoupParserParser *)xmlParser;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupParserParser)

FOUNDATION_EXPORT void OrgJsoupParserParser_initWithOrgJsoupParserTreeBuilder_(OrgJsoupParserParser *self, OrgJsoupParserTreeBuilder *treeBuilder);

FOUNDATION_EXPORT OrgJsoupParserParser *new_OrgJsoupParserParser_initWithOrgJsoupParserTreeBuilder_(OrgJsoupParserTreeBuilder *treeBuilder) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupParserParser *create_OrgJsoupParserParser_initWithOrgJsoupParserTreeBuilder_(OrgJsoupParserTreeBuilder *treeBuilder);

FOUNDATION_EXPORT OrgJsoupNodesDocument *OrgJsoupParserParser_parseWithNSString_withNSString_(NSString *html, NSString *baseUri);

FOUNDATION_EXPORT id<JavaUtilList> OrgJsoupParserParser_parseFragmentWithNSString_withOrgJsoupNodesElement_withNSString_(NSString *fragmentHtml, OrgJsoupNodesElement *context, NSString *baseUri);

FOUNDATION_EXPORT id<JavaUtilList> OrgJsoupParserParser_parseXmlFragmentWithNSString_withNSString_(NSString *fragmentXml, NSString *baseUri);

FOUNDATION_EXPORT OrgJsoupNodesDocument *OrgJsoupParserParser_parseBodyFragmentWithNSString_withNSString_(NSString *bodyHtml, NSString *baseUri);

FOUNDATION_EXPORT NSString *OrgJsoupParserParser_unescapeEntitiesWithNSString_withBoolean_(NSString *string, jboolean inAttribute);

FOUNDATION_EXPORT OrgJsoupNodesDocument *OrgJsoupParserParser_parseBodyFragmentRelaxedWithNSString_withNSString_(NSString *bodyHtml, NSString *baseUri);

FOUNDATION_EXPORT OrgJsoupParserParser *OrgJsoupParserParser_htmlParser(void);

FOUNDATION_EXPORT OrgJsoupParserParser *OrgJsoupParserParser_xmlParser(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupParserParser)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgJsoupParserParser")
