//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jsoup/src/main/java/org/jsoup/nodes/Node.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJsoupNodesNode")
#ifdef RESTRICT_OrgJsoupNodesNode
#define INCLUDE_ALL_OrgJsoupNodesNode 0
#else
#define INCLUDE_ALL_OrgJsoupNodesNode 1
#endif
#undef RESTRICT_OrgJsoupNodesNode

#if !defined (OrgJsoupNodesNode_) && (INCLUDE_ALL_OrgJsoupNodesNode || defined(INCLUDE_OrgJsoupNodesNode))
#define OrgJsoupNodesNode_

@class IOSObjectArray;
@class JavaLangStringBuilder;
@class OrgJsoupNodesAttributes;
@class OrgJsoupNodesDocument;
@class OrgJsoupNodesDocument_OutputSettings;
@protocol JavaUtilList;
@protocol OrgJsoupSelectNodeVisitor;

/*!
 @brief The base, abstract Node model.Elements, Documents, Comments etc are all Node instances.
 @author Jonathan Hedley, jonathan@@hedley.net
 */
@interface OrgJsoupNodesNode : NSObject < NSCopying > {
 @public
  OrgJsoupNodesNode *parentNode_;
  id<JavaUtilList> childNodes_;
  OrgJsoupNodesAttributes *attributes_;
  NSString *baseUri_;
  jint siblingIndex_;
}

#pragma mark Public

/*!
 @brief Get an absolute URL from a URL attribute that may be relative (i.e.an <code>&lt;a href&gt;</code> or 
 <code>&lt;img src&gt;</code>).
 <p>
  E.g.: <code>String absUrl = linkEl.absUrl("href");</code>
  </p>
  <p>
  If the attribute value is already absolute (i.e. it starts with a protocol, like 
 <code>http://</code> or <code>https://</code> etc), and it successfully parses as a URL, the attribute is
  returned directly. Otherwise, it is treated as a URL relative to the element's <code>baseUri</code>, and made
  absolute using that. 
 </p>
  <p>
  As an alternate, you can use the <code>attr</code> method with the <code>abs:</code> prefix, e.g.: 
 <code>String absUrl = linkEl.attr("abs:href");</code>
  </p>
 @param attributeKey The attribute key
 @return An absolute URL if one could be made, or an empty string (not null) if the attribute was missing or
  could not be made successfully into a URL.
 - seealso: #attr
 - seealso: java.net.URL
 */
- (NSString *)absUrlWithNSString:(NSString *)attributeKey;

/*!
 @brief Insert the specified node into the DOM after this node (i.e.as a following sibling).
 @param node to add after this node
 @return this node, for chaining
 - seealso: #before(Node)
 */
- (OrgJsoupNodesNode *)afterWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)node;

/*!
 @brief Insert the specified HTML into the DOM after this node (i.e.as a following sibling).
 @param html HTML to add after this node
 @return this node, for chaining
 - seealso: #before(String)
 */
- (OrgJsoupNodesNode *)afterWithNSString:(NSString *)html;

/*!
 @brief Get an attribute's value by its key.
 <p>
  To get an absolute URL from an attribute that may be a relative URL, prefix the key with <code><b>abs</b></code>,
  which is a shortcut to the <code>absUrl</code> method. 
 </p>
  E.g.: 
 <blockquote><code>String url = a.attr("abs:href");</code></blockquote>
 @param attributeKey The attribute key.
 @return The attribute, or empty string if not present (to avoid nulls).
 - seealso: #attributes()
 - seealso: #hasAttr(String)
 - seealso: #absUrl(String)
 */
- (NSString *)attrWithNSString:(NSString *)attributeKey;

/*!
 @brief Set an attribute (key=value).If the attribute already exists, it is replaced.
 @param attributeKey The attribute key.
 @param attributeValue The attribute value.
 @return this (for chaining)
 */
- (OrgJsoupNodesNode *)attrWithNSString:(NSString *)attributeKey
                           withNSString:(NSString *)attributeValue;

/*!
 @brief Get all of the element's attributes.
 @return attributes (which implements iterable, in same order as presented in original HTML).
 */
- (OrgJsoupNodesAttributes *)attributes;

/*!
 @brief Get the base URI of this node.
 @return base URI
 */
- (NSString *)baseUri;

/*!
 @brief Insert the specified node into the DOM before this node (i.e.as a preceding sibling).
 @param node to add before this node
 @return this node, for chaining
 - seealso: #after(Node)
 */
- (OrgJsoupNodesNode *)beforeWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)node;

/*!
 @brief Insert the specified HTML into the DOM before this node (i.e.as a preceding sibling).
 @param html HTML to add before this node
 @return this node, for chaining
 - seealso: #after(String)
 */
- (OrgJsoupNodesNode *)beforeWithNSString:(NSString *)html;

/*!
 @brief Get a child node by its 0-based index.
 @param index index of child node
 @return the child node at this index. Throws a <code>IndexOutOfBoundsException</code> if the index is out of bounds.
 */
- (OrgJsoupNodesNode *)childNodeWithInt:(jint)index;

/*!
 @brief Get this node's children.Presented as an unmodifiable list: new children can not be added, but the child nodes
      themselves can be manipulated.
 @return list of children. If no children, returns an empty list.
 */
- (id<JavaUtilList>)childNodes;

/*!
 @brief Returns a deep copy of this node's children.Changes made to these nodes will not be reflected in the original nodes
 @return a deep copy of this node's children
 */
- (id<JavaUtilList>)childNodesCopy;

/*!
 @brief Get the number of child nodes that this node holds.
 @return the number of child nodes that this node holds.
 */
- (jint)childNodeSize;

/*!
 @brief Create a stand-alone, deep copy of this node, and all of its children.The cloned node will have no siblings or
  parent node.
 As a stand-alone object, any changes made to the clone or any of its children will not impact the
  original node. 
 <p>
  The cloned node may be adopted into another Document or node structure using <code>Element.appendChild(Node)</code>.
 @return stand-alone cloned node
 */
- (OrgJsoupNodesNode *)java_clone;

/*!
 @brief Check if this node is equal to another node.A node is considered equal if its attributes and content equal the
  other node; particularly its position in the tree does not influence its equality.
 @param o other object to compare to
 @return true if the content of this node is the same as the other
 */
- (jboolean)isEqual:(id)o;

/*!
 @brief Test if this element has an attribute.
 @param attributeKey The attribute key to check.
 @return true if the attribute exists, false if not.
 */
- (jboolean)hasAttrWithNSString:(NSString *)attributeKey;

/*!
 @brief Calculates a hash code for this node, which includes iterating all its attributes, and recursing into any child
  nodes.This means that a node's hashcode is based on it and its child content, and not its parent or place in the
  tree.
 So two nodes with the same content, regardless of their position in the tree, will have the same hashcode.
 @return the calculated hashcode
 - seealso: Node#equals(Object)
 */
- (NSUInteger)hash;

/*!
 @brief Get this node's next sibling.
 @return next sibling, or null if this is the last sibling
 */
- (OrgJsoupNodesNode *)nextSibling;

/*!
 @brief Get the node name of this node.Use for debugging purposes and not logic switching (for that, use instanceof).
 @return node name
 */
- (NSString *)nodeName;

/*!
 @brief Get the outer HTML of this node.
 @return HTML
 */
- (NSString *)outerHtml;

/*!
 @brief Gets the Document associated with this Node.
 @return the Document associated with this Node, or null if there is no such Document.
 */
- (OrgJsoupNodesDocument *)ownerDocument;

/*!
 @brief Gets this node's parent node.
 @return parent node; or null if no parent.
 */
- (OrgJsoupNodesNode *)parent;

/*!
 @brief Gets this node's parent node.Node overridable by extending classes, so useful if you really just need the Node type.
 @return parent node; or null if no parent.
 */
- (OrgJsoupNodesNode *)parentNode;

/*!
 @brief Get this node's previous sibling.
 @return the previous sibling, or null if this is the first sibling
 */
- (OrgJsoupNodesNode *)previousSibling;

/*!
 @brief Remove (delete) this node from the DOM tree.If this node has children, they are also removed.
 */
- (void)remove;

/*!
 @brief Remove an attribute from this element.
 @param attributeKey The attribute to remove.
 @return this (for chaining)
 */
- (OrgJsoupNodesNode *)removeAttrWithNSString:(NSString *)attributeKey;

/*!
 @brief Replace this node in the DOM with the supplied node.
 @param inArg the node that will will replace the existing node.
 */
- (void)replaceWithWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)inArg;

/*!
 @brief Update the base URI of this node and all of its descendants.
 @param baseUri base URI to set
 */
- (void)setBaseUriWithNSString:(NSString *)baseUri;

/*!
 @brief Get the list index of this node in its node sibling list.I.e. if this is the first node
  sibling, returns 0.
 @return position in node sibling list
 - seealso: org.jsoup.nodes.Element
 */
- (jint)siblingIndex;

/*!
 @brief Retrieves this node's sibling nodes.Similar to <code>node.parent.childNodes()</code>, but does not
      include this node (a node is not a sibling of itself).
 @return node siblings. If the node has no parent, returns an empty list.
 */
- (id<JavaUtilList>)siblingNodes;

- (NSString *)description;

/*!
 @brief Perform a depth-first traversal through this node and its descendants.
 @param nodeVisitor the visitor callbacks to perform on each node
 @return this node, for chaining
 */
- (OrgJsoupNodesNode *)traverseWithOrgJsoupSelectNodeVisitor:(id<OrgJsoupSelectNodeVisitor>)nodeVisitor;

/*!
 @brief Removes this node from the DOM, and moves its children up into the node's parent.This has the effect of dropping
  the node but keeping its children.
 <p>
  For example, with the input html: 
 </p>
  <p><code><div>One <span>Two <b>Three</b></span></div></code></p>
  Calling <code>element.unwrap()</code> on the <code>span</code> element will result in the html: 
 <p><code><div>One Two <b>Three</b></div></code></p>
  and the <code>"Two "</code> <code>TextNode</code> being returned.
 @return the first child of this node, after the node has been unwrapped. Null if the node had no children.
 - seealso: #remove()
 - seealso: #wrap(String)
 */
- (OrgJsoupNodesNode *)unwrap;

/*!
 @brief Wrap the supplied HTML around this node.
 @param html HTML to wrap around this element, e.g. <code><div class="head"></div></code> . Can be arbitrarily deep.
 @return this node, for chaining.
 */
- (OrgJsoupNodesNode *)wrapWithNSString:(NSString *)html;

#pragma mark Protected

/*!
 @brief Default constructor.Doesn't setup base uri, children, or attributes; use with caution.
 */
- (instancetype)init;

- (instancetype)initWithNSString:(NSString *)baseUri;

/*!
 @brief Create a new Node.
 @param baseUri base URI
 @param attributes attributes (not null, but may be empty)
 */
- (instancetype)initWithNSString:(NSString *)baseUri
     withOrgJsoupNodesAttributes:(OrgJsoupNodesAttributes *)attributes;

- (void)addChildrenWithInt:(jint)index
withOrgJsoupNodesNodeArray:(IOSObjectArray *)children;

- (void)addChildrenWithOrgJsoupNodesNodeArray:(IOSObjectArray *)children;

- (IOSObjectArray *)childNodesAsArray;

- (OrgJsoupNodesNode *)doCloneWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)parent;

- (void)ensureChildNodes;

- (void)indentWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                                withInt:(jint)depth
withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outArg;

- (void)outerHtmlWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum;

- (void)removeChildWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)outArg;

- (void)reparentChildWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)child;

- (void)replaceChildWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)outArg
                    withOrgJsoupNodesNode:(OrgJsoupNodesNode *)inArg;

- (void)setParentNodeWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)parentNode;

- (void)setSiblingIndexWithInt:(jint)siblingIndex;

#pragma mark Package-Private

- (OrgJsoupNodesDocument_OutputSettings *)getOutputSettings;

/*!
 @brief Get the outer HTML of this node.
 @param accum accumulator to place HTML into
 */
- (void)outerHtmlHeadWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                                       withInt:(jint)depth
      withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outArg;

- (void)outerHtmlTailWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                                       withInt:(jint)depth
      withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outArg;

@end

J2OBJC_STATIC_INIT(OrgJsoupNodesNode)

J2OBJC_FIELD_SETTER(OrgJsoupNodesNode, parentNode_, OrgJsoupNodesNode *)
J2OBJC_FIELD_SETTER(OrgJsoupNodesNode, childNodes_, id<JavaUtilList>)
J2OBJC_FIELD_SETTER(OrgJsoupNodesNode, attributes_, OrgJsoupNodesAttributes *)
J2OBJC_FIELD_SETTER(OrgJsoupNodesNode, baseUri_, NSString *)

FOUNDATION_EXPORT void OrgJsoupNodesNode_initWithNSString_withOrgJsoupNodesAttributes_(OrgJsoupNodesNode *self, NSString *baseUri, OrgJsoupNodesAttributes *attributes);

FOUNDATION_EXPORT void OrgJsoupNodesNode_initWithNSString_(OrgJsoupNodesNode *self, NSString *baseUri);

FOUNDATION_EXPORT void OrgJsoupNodesNode_init(OrgJsoupNodesNode *self);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupNodesNode)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJsoupNodesNode")
