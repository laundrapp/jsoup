//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jsoup/src/main/java/org/jsoup/nodes/Document.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJsoupNodesDocument")
#ifdef RESTRICT_OrgJsoupNodesDocument
#define INCLUDE_ALL_OrgJsoupNodesDocument 0
#else
#define INCLUDE_ALL_OrgJsoupNodesDocument 1
#endif
#undef RESTRICT_OrgJsoupNodesDocument

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJsoupNodesDocument_) && (INCLUDE_ALL_OrgJsoupNodesDocument || defined(INCLUDE_OrgJsoupNodesDocument))
#define OrgJsoupNodesDocument_

#define RESTRICT_OrgJsoupNodesElement 1
#define INCLUDE_OrgJsoupNodesElement 1
#include "org/jsoup/nodes/Element.h"

@class JavaNioCharsetCharset;
@class OrgJsoupNodesAttributes;
@class OrgJsoupNodesDocument_OutputSettings;
@class OrgJsoupNodesDocument_QuirksMode;
@class OrgJsoupParserTag;

/*!
 @brief A HTML Document.
 @author Jonathan Hedley, jonathan@@hedley.net
 */
@interface OrgJsoupNodesDocument : OrgJsoupNodesElement

#pragma mark Public

/*!
 @brief Create a new, empty Document.
 @param baseUri base URI of document
 - seealso: org.jsoup.Jsoup
 - seealso: #createShell
 */
- (instancetype)initWithNSString:(NSString *)baseUri;

/*!
 @brief Accessor to the document's <code>body</code> element.
 @return <code>body</code>
 */
- (OrgJsoupNodesElement *)body;

/*!
 @brief Returns the charset used in this document.This method is equivalent
  to <code>OutputSettings.charset()</code>.
 @return Current Charset
 - seealso: OutputSettings#charset()
 */
- (JavaNioCharsetCharset *)charset;

/*!
 @brief Sets the charset used in this document.This method is equivalent
  to <code>OutputSettings.charset(Charset)</code>
  but in addition it updates the
  charset / encoding element within the document.
 <p>This enables 
 <code>charset update</code>.</p>
   
 <p>If there's no element with charset / encoding information yet it will
  be created. Obsolete charset / encoding definitions are removed!</p>
   
 <p><b>Elements used:</b></p>
   
 <ul>
  <li><b>Html:</b> <i>&lt;meta charset="CHARSET"&gt;</i></li>
  <li><b>Xml:</b> <i>&lt;?xml version="1.0" encoding="CHARSET"&gt;</i></li>
  </ul>
 @param charset Charset
 - seealso: #updateMetaCharsetElement(boolean)
 - seealso: OutputSettings#charset(java.nio.charset.Charset)
 */
- (void)charsetWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

- (OrgJsoupNodesDocument *)java_clone;

/*!
 @brief Create a new Element, with this document's base uri.Does not make the new element a child of this document.
 @param tagName element tag name (e.g. <code>a</code> )
 @return new element
 */
- (OrgJsoupNodesElement *)createElementWithNSString:(NSString *)tagName;

/*!
 @brief Create a valid, empty shell of a document, suitable for adding more elements to.
 @param baseUri baseUri of document
 @return document with html, head, and body elements.
 */
+ (OrgJsoupNodesDocument *)createShellWithNSString:(NSString *)baseUri;

/*!
 @brief Accessor to the document's <code>head</code> element.
 @return <code>head</code>
 */
- (OrgJsoupNodesElement *)head;

/*!
 @brief Get the URL this Document was parsed from.If the starting URL is a redirect,
  this will return the final URL from which the document was served from.
 @return location
 */
- (NSString *)location;

- (NSString *)nodeName;

/*!
 @brief Normalise the document.This happens after the parse phase so generally does not need to be called.
 Moves any text content that is not in the body element into the body.
 @return this document after normalisation
 */
- (OrgJsoupNodesDocument *)normalise;

- (NSString *)outerHtml;

/*!
 @brief Get the document's current output settings.
 @return the document's current output settings.
 */
- (OrgJsoupNodesDocument_OutputSettings *)outputSettings;

/*!
 @brief Set the document's output settings.
 @param outputSettings new output settings.
 @return this document, for chaining.
 */
- (OrgJsoupNodesDocument *)outputSettingsWithOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outputSettings;

- (OrgJsoupNodesDocument_QuirksMode *)quirksMode;

- (OrgJsoupNodesDocument *)quirksModeWithOrgJsoupNodesDocument_QuirksMode:(OrgJsoupNodesDocument_QuirksMode *)quirksMode;

/*!
 @brief Set the text of the <code>body</code> of this document.Any existing nodes within the body will be cleared.
 @param text unencoded text
 @return this document
 */
- (OrgJsoupNodesElement *)textWithNSString:(NSString *)text;

/*!
 @brief Get the string contents of the document's <code>title</code> element.
 @return Trimmed title, or empty string if none set.
 */
- (NSString *)title;

/*!
 @brief Set the document's <code>title</code> element.Updates the existing element, or adds <code>title</code> to <code>head</code> if
      not present
 @param title string to set as title
 */
- (void)titleWithNSString:(NSString *)title;

/*!
 @brief Returns whether the element with charset information in this document is
  updated on changes through <code>Document.charset(Charset)</code>
  or not.
 @return Returns <tt>true</tt> if the element is updated on charset
  changes, <tt>false</tt> if not
 */
- (jboolean)updateMetaCharsetElement;

/*!
 @brief Sets whether the element with charset information in this document is
  updated on changes through <code>Document.charset(Charset)</code>
  or not.
 <p>If set to <tt>false</tt> <i>(default)</i> there are no elements
  modified.</p>
 @param update If  <tt> true </tt>  the element updated on charset
   changes,  <tt> false </tt>  if not
 - seealso: #charset(java.nio.charset.Charset)
 */
- (void)updateMetaCharsetElementWithBoolean:(jboolean)update;

// Disallowed inherited constructors, do not use.

- (instancetype)initWithOrgJsoupParserTag:(OrgJsoupParserTag *)arg0
                             withNSString:(NSString *)arg1 NS_UNAVAILABLE;

- (instancetype)initWithOrgJsoupParserTag:(OrgJsoupParserTag *)arg0
                             withNSString:(NSString *)arg1
              withOrgJsoupNodesAttributes:(OrgJsoupNodesAttributes *)arg2 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupNodesDocument)

FOUNDATION_EXPORT void OrgJsoupNodesDocument_initWithNSString_(OrgJsoupNodesDocument *self, NSString *baseUri);

FOUNDATION_EXPORT OrgJsoupNodesDocument *new_OrgJsoupNodesDocument_initWithNSString_(NSString *baseUri) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupNodesDocument *create_OrgJsoupNodesDocument_initWithNSString_(NSString *baseUri);

FOUNDATION_EXPORT OrgJsoupNodesDocument *OrgJsoupNodesDocument_createShellWithNSString_(NSString *baseUri);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupNodesDocument)

#endif

#if !defined (OrgJsoupNodesDocument_OutputSettings_) && (INCLUDE_ALL_OrgJsoupNodesDocument || defined(INCLUDE_OrgJsoupNodesDocument_OutputSettings))
#define OrgJsoupNodesDocument_OutputSettings_

@class JavaNioCharsetCharset;
@class JavaNioCharsetCharsetEncoder;
@class OrgJsoupNodesDocument_OutputSettings_Syntax;
@class OrgJsoupNodesEntities_EscapeMode;

/*!
 @brief A Document's output settings control the form of the text() and html() methods.
 */
@interface OrgJsoupNodesDocument_OutputSettings : NSObject < NSCopying >

#pragma mark Public

- (instancetype)init;

/*!
 @brief Get the document's current output charset, which is used to control which characters are escaped when
  generating HTML (via the <code>html()</code> methods), and which are kept intact.
 <p>
  Where possible (when parsing from a URL or File), the document's output charset is automatically set to the
  input charset. Otherwise, it defaults to UTF-8.
 @return the document's current charset.
 */
- (JavaNioCharsetCharset *)charset;

/*!
 @brief Update the document's output charset.
 @param charset the new charset to use.
 @return the document's output settings, for chaining
 */
- (OrgJsoupNodesDocument_OutputSettings *)charsetWithJavaNioCharsetCharset:(JavaNioCharsetCharset *)charset;

/*!
 @brief Update the document's output charset.
 @param charset the new charset (by name) to use.
 @return the document's output settings, for chaining
 */
- (OrgJsoupNodesDocument_OutputSettings *)charsetWithNSString:(NSString *)charset;

- (OrgJsoupNodesDocument_OutputSettings *)java_clone;

/*!
 @brief Get the document's current HTML escape mode: <code>base</code>, which provides a limited set of named HTML
  entities and escapes other characters as numbered entities for maximum compatibility; or <code>extended</code>,
  which uses the complete set of HTML named entities.
 <p>
  The default escape mode is <code>base</code>.
 @return the document's current escape mode
 */
- (OrgJsoupNodesEntities_EscapeMode *)escapeMode;

/*!
 @brief Set the document's escape mode, which determines how characters are escaped when the output character set
  does not support a given character:- using either a named or a numbered escape.
 @param escapeMode the new escape mode to use
 @return the document's output settings, for chaining
 */
- (OrgJsoupNodesDocument_OutputSettings *)escapeModeWithOrgJsoupNodesEntities_EscapeMode:(OrgJsoupNodesEntities_EscapeMode *)escapeMode;

/*!
 @brief Get the current tag indent amount, used when pretty printing.
 @return the current indent amount
 */
- (jint)indentAmount;

/*!
 @brief Set the indent amount for pretty printing
 @param indentAmount number of spaces to use for indenting each level. Must be &gt;=  0.
 @return this, for chaining
 */
- (OrgJsoupNodesDocument_OutputSettings *)indentAmountWithInt:(jint)indentAmount;

/*!
 @brief Get if outline mode is enabled.Default is false.
 If enabled, the HTML output methods will consider
  all tags as block.
 @return if outline mode is enabled.
 */
- (jboolean)outline;

/*!
 @brief Enable or disable HTML outline mode.
 @param outlineMode new outline setting
 @return this, for chaining
 */
- (OrgJsoupNodesDocument_OutputSettings *)outlineWithBoolean:(jboolean)outlineMode;

/*!
 @brief Get if pretty printing is enabled.Default is true.
 If disabled, the HTML output methods will not re-format
  the output, and the output will generally look like the input.
 @return if pretty printing is enabled.
 */
- (jboolean)prettyPrint;

/*!
 @brief Enable or disable pretty printing.
 @param pretty new pretty print setting
 @return this, for chaining
 */
- (OrgJsoupNodesDocument_OutputSettings *)prettyPrintWithBoolean:(jboolean)pretty;

/*!
 @brief Get the document's current output syntax.
 @return current syntax
 */
- (OrgJsoupNodesDocument_OutputSettings_Syntax *)syntax;

/*!
 @brief Set the document's output syntax.Either <code>html</code>, with empty tags and boolean attributes (etc), or 
 <code>xml</code>, with self-closing tags.
 @param syntax serialization syntax
 @return the document's output settings, for chaining
 */
- (OrgJsoupNodesDocument_OutputSettings *)syntaxWithOrgJsoupNodesDocument_OutputSettings_Syntax:(OrgJsoupNodesDocument_OutputSettings_Syntax *)syntax;

#pragma mark Package-Private

- (JavaNioCharsetCharsetEncoder *)encoder;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupNodesDocument_OutputSettings)

FOUNDATION_EXPORT void OrgJsoupNodesDocument_OutputSettings_init(OrgJsoupNodesDocument_OutputSettings *self);

FOUNDATION_EXPORT OrgJsoupNodesDocument_OutputSettings *new_OrgJsoupNodesDocument_OutputSettings_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupNodesDocument_OutputSettings *create_OrgJsoupNodesDocument_OutputSettings_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupNodesDocument_OutputSettings)

#endif

#if !defined (OrgJsoupNodesDocument_OutputSettings_Syntax_) && (INCLUDE_ALL_OrgJsoupNodesDocument || defined(INCLUDE_OrgJsoupNodesDocument_OutputSettings_Syntax))
#define OrgJsoupNodesDocument_OutputSettings_Syntax_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, OrgJsoupNodesDocument_OutputSettings_Syntax_Enum) {
  OrgJsoupNodesDocument_OutputSettings_Syntax_Enum_html = 0,
  OrgJsoupNodesDocument_OutputSettings_Syntax_Enum_xml = 1,
};

/*!
 @brief The output serialization syntax.
 */
@interface OrgJsoupNodesDocument_OutputSettings_Syntax : JavaLangEnum

#pragma mark Public

+ (OrgJsoupNodesDocument_OutputSettings_Syntax *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(OrgJsoupNodesDocument_OutputSettings_Syntax)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgJsoupNodesDocument_OutputSettings_Syntax *OrgJsoupNodesDocument_OutputSettings_Syntax_values_[];

inline OrgJsoupNodesDocument_OutputSettings_Syntax *OrgJsoupNodesDocument_OutputSettings_Syntax_get_html(void);
J2OBJC_ENUM_CONSTANT(OrgJsoupNodesDocument_OutputSettings_Syntax, html)

inline OrgJsoupNodesDocument_OutputSettings_Syntax *OrgJsoupNodesDocument_OutputSettings_Syntax_get_xml(void);
J2OBJC_ENUM_CONSTANT(OrgJsoupNodesDocument_OutputSettings_Syntax, xml)

FOUNDATION_EXPORT IOSObjectArray *OrgJsoupNodesDocument_OutputSettings_Syntax_values(void);

FOUNDATION_EXPORT OrgJsoupNodesDocument_OutputSettings_Syntax *OrgJsoupNodesDocument_OutputSettings_Syntax_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgJsoupNodesDocument_OutputSettings_Syntax *OrgJsoupNodesDocument_OutputSettings_Syntax_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupNodesDocument_OutputSettings_Syntax)

#endif

#if !defined (OrgJsoupNodesDocument_QuirksMode_) && (INCLUDE_ALL_OrgJsoupNodesDocument || defined(INCLUDE_OrgJsoupNodesDocument_QuirksMode))
#define OrgJsoupNodesDocument_QuirksMode_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, OrgJsoupNodesDocument_QuirksMode_Enum) {
  OrgJsoupNodesDocument_QuirksMode_Enum_noQuirks = 0,
  OrgJsoupNodesDocument_QuirksMode_Enum_quirks = 1,
  OrgJsoupNodesDocument_QuirksMode_Enum_limitedQuirks = 2,
};

@interface OrgJsoupNodesDocument_QuirksMode : JavaLangEnum

#pragma mark Public

+ (OrgJsoupNodesDocument_QuirksMode *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(OrgJsoupNodesDocument_QuirksMode)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgJsoupNodesDocument_QuirksMode *OrgJsoupNodesDocument_QuirksMode_values_[];

inline OrgJsoupNodesDocument_QuirksMode *OrgJsoupNodesDocument_QuirksMode_get_noQuirks(void);
J2OBJC_ENUM_CONSTANT(OrgJsoupNodesDocument_QuirksMode, noQuirks)

inline OrgJsoupNodesDocument_QuirksMode *OrgJsoupNodesDocument_QuirksMode_get_quirks(void);
J2OBJC_ENUM_CONSTANT(OrgJsoupNodesDocument_QuirksMode, quirks)

inline OrgJsoupNodesDocument_QuirksMode *OrgJsoupNodesDocument_QuirksMode_get_limitedQuirks(void);
J2OBJC_ENUM_CONSTANT(OrgJsoupNodesDocument_QuirksMode, limitedQuirks)

FOUNDATION_EXPORT IOSObjectArray *OrgJsoupNodesDocument_QuirksMode_values(void);

FOUNDATION_EXPORT OrgJsoupNodesDocument_QuirksMode *OrgJsoupNodesDocument_QuirksMode_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgJsoupNodesDocument_QuirksMode *OrgJsoupNodesDocument_QuirksMode_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupNodesDocument_QuirksMode)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgJsoupNodesDocument")
