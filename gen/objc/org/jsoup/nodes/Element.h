//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jsoup/src/main/java/org/jsoup/nodes/Element.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJsoupNodesElement")
#ifdef RESTRICT_OrgJsoupNodesElement
#define INCLUDE_ALL_OrgJsoupNodesElement 0
#else
#define INCLUDE_ALL_OrgJsoupNodesElement 1
#endif
#undef RESTRICT_OrgJsoupNodesElement

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJsoupNodesElement_) && (INCLUDE_ALL_OrgJsoupNodesElement || defined(INCLUDE_OrgJsoupNodesElement))
#define OrgJsoupNodesElement_

#define RESTRICT_OrgJsoupNodesNode 1
#define INCLUDE_OrgJsoupNodesNode 1
#include "org/jsoup/nodes/Node.h"

@class JavaLangInteger;
@class JavaLangStringBuilder;
@class JavaUtilRegexPattern;
@class OrgJsoupNodesAttributes;
@class OrgJsoupNodesDocument_OutputSettings;
@class OrgJsoupParserTag;
@class OrgJsoupSelectElements;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSet;

/*!
 @brief A HTML element consists of a tag name, attributes, and child nodes (including text nodes and
  other elements).
 From an Element, you can extract data, traverse the node graph, and manipulate the HTML.
 @author Jonathan Hedley, jonathan@@hedley.net
 */
@interface OrgJsoupNodesElement : OrgJsoupNodesNode

#pragma mark Public

/*!
 @brief Create a new Element from a tag and a base URI.
 @param tag element tag
 @param baseUri the base URI of this element. It is acceptable for the base URI to be an empty             string, but not null.
 - seealso: Tag#valueOf(String)
 */
- (instancetype __nonnull)initWithOrgJsoupParserTag:(OrgJsoupParserTag *)tag
                                       withNSString:(NSString *)baseUri;

/*!
 @brief Create a new, standalone Element.
 (Standalone in that is has no parent.)
 @param tag tag of this element
 @param baseUri the base URI
 @param attributes initial attributes
 - seealso: #appendChild(Node)
 - seealso: #appendElement(String)
 */
- (instancetype __nonnull)initWithOrgJsoupParserTag:(OrgJsoupParserTag *)tag
                                       withNSString:(NSString *)baseUri
                        withOrgJsoupNodesAttributes:(OrgJsoupNodesAttributes *)attributes;

/*!
 @brief Add a class name to this element's <code>class</code> attribute.
 @param className_ class name to add
 @return this element
 */
- (OrgJsoupNodesElement *)addClassWithNSString:(NSString *)className_;

/*!
 @brief Insert the specified node into the DOM after this node (as a following sibling).
 @param node to add after this element
 @return this element, for chaining
 - seealso: #before(Node)
 */
- (OrgJsoupNodesElement *)afterWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)node;

/*!
 @brief Insert the specified HTML into the DOM after this element (as a following sibling).
 @param html HTML to add after this element
 @return this element, for chaining
 - seealso: #before(String)
 */
- (OrgJsoupNodesElement *)afterWithNSString:(NSString *)html;

/*!
 @brief Add inner HTML to this element.The supplied HTML will be parsed, and each node appended to the end of the children.
 @param html HTML to add inside this element, after the existing HTML
 @return this element
 - seealso: #html(String)
 */
- (OrgJsoupNodesElement *)appendWithNSString:(NSString *)html;

/*!
 @brief Add a node child node to this element.
 @param child node to add.
 @return this element, so that you can add more child nodes or elements.
 */
- (OrgJsoupNodesElement *)appendChildWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)child;

/*!
 @brief Create a new element by tag name, and add it as the last child.
 @param tagName the name of the tag (e.g. <code>div</code> ).
 @return the new element, to allow you to add content to it, e.g.:
   <code>parent.appendElement("h1").attr("id", "header").text("Welcome");</code>
 */
- (OrgJsoupNodesElement *)appendElementWithNSString:(NSString *)tagName;

/*!
 @brief Create and append a new TextNode to this element.
 @param text the unencoded text to add
 @return this element
 */
- (OrgJsoupNodesElement *)appendTextWithNSString:(NSString *)text;

/*!
 @brief Set a boolean attribute value on this element.Setting to <code>true</code> sets the attribute value to "" and
  marks the attribute as boolean so no value is written out.
 Setting to <code>false</code> removes the attribute
  with the same key if it exists.
 @param attributeKey the attribute key
 @param attributeValue the attribute value
 @return this element
 */
- (OrgJsoupNodesElement *)attrWithNSString:(NSString *)attributeKey
                               withBoolean:(jboolean)attributeValue;

/*!
 @brief Set an attribute value on this element.If this element already has an attribute with the
  key, its value is updated; otherwise, a new attribute is added.
 @return this element
 */
- (OrgJsoupNodesElement *)attrWithNSString:(NSString *)attributeKey
                              withNSString:(NSString *)attributeValue;

/*!
 @brief Insert the specified node into the DOM before this node (as a preceding sibling).
 @param node to add before this element
 @return this Element, for chaining
 - seealso: #after(Node)
 */
- (OrgJsoupNodesElement *)beforeWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)node;

/*!
 @brief Insert the specified HTML into the DOM before this element (as a preceding sibling).
 @param html HTML to add before this element
 @return this element, for chaining
 - seealso: #after(String)
 */
- (OrgJsoupNodesElement *)beforeWithNSString:(NSString *)html;

/*!
 @brief Get a child element of this element, by its 0-based index number.
 <p>
  Note that an element can have both mixed Nodes and Elements as children. This method inspects
  a filtered list of children that are elements, and the index is based on that filtered list. 
 </p>
 @param index the index number of the element to retrieve
 @return the child element, if it exists, otherwise throws an <code>IndexOutOfBoundsException</code>
 - seealso: #childNode(int)
 */
- (OrgJsoupNodesElement *)childWithInt:(jint)index;

/*!
 @brief Get this element's child elements.
 <p>
  This is effectively a filter on <code>childNodes()</code> to get Element nodes. 
 </p>
 @return child elements. If this element has no children, returns an
  empty list.
 - seealso: #childNodes()
 */
- (OrgJsoupSelectElements *)children;

/*!
 @brief Gets the literal value of this element's "class" attribute, which may include multiple class names, space
  separated.
 (E.g. on <code>&lt;div class="header gray"&gt;</code> returns, "<code>header gray</code>")
 @return The literal class attribute, or <b>empty string</b> if no class attribute set.
 */
- (NSString *)className__;

/*!
 @brief Get all of the element's class names.E.g. on element <code><div class="header gray"></code>,
  returns a set of two elements <code>"header", "gray"</code>.
 Note that modifications to this set are not pushed to
  the backing <code>class</code> attribute; use the <code>classNames(java.util.Set)</code> method to persist them.
 @return set of classnames, empty if no class attribute
 */
- (id<JavaUtilSet>)classNames;

/*!
 @brief Set the element's <code>class</code> attribute to the supplied class names.
 @param classNames set of classes
 @return this element, for chaining
 */
- (OrgJsoupNodesElement *)classNamesWithJavaUtilSet:(id<JavaUtilSet>)classNames;

- (OrgJsoupNodesElement *)java_clone;

/*!
 @brief Get a CSS selector that will uniquely select this element.
 <p>
  If the element has an ID, returns #id;
  otherwise returns the parent (if any) CSS selector, followed by &apos;&gt;&apos;,
  followed by a unique selector for the element (tag.class.class:nth-child(n)). 
 </p>
 @return the CSS Path that can be used to retrieve the element in a selector.
 */
- (NSString *)cssSelector;

/*!
 @brief Get the combined data of this element.Data is e.g. the inside of a <code>script</code> tag.
 @return the data, or empty string if none
 - seealso: #dataNodes()
 */
- (NSString *)data;

/*!
 @brief Get this element's child data nodes.The list is unmodifiable but the data nodes may be manipulated.
 <p>
  This is effectively a filter on <code>childNodes()</code> to get Data nodes. 
 </p>
 @return child data nodes. If this element has no data nodes, returns an
  empty list.
 - seealso: #data()
 */
- (id<JavaUtilList>)dataNodes;

/*!
 @brief Get this element's HTML5 custom data attributes.Each attribute in the element that has a key
  starting with "data-" is included the dataset.
 <p>
  E.g., the element <code><div data-package="jsoup" data-language="Java" class="group">...</code> has the dataset 
 <code>package=jsoup, language=java</code>.
  <p>
  This map is a filtered view of the element's attribute map. Changes to one map (add, remove, update) are reflected
  in the other map. 
 <p>
  You can find elements that have data attributes using the <code>[^data-]</code> attribute key prefix selector.
 @return a map of <code>key=value</code> custom data attributes.
 */
- (id<JavaUtilMap>)dataset;

/*!
 @brief Get the list index of this element in its element sibling list.I.e. if this is the first element
  sibling, returns 0.
 @return position in element sibling list
 */
- (JavaLangInteger *)elementSiblingIndex;

/*!
 @brief Remove all of the element's child nodes.Any attributes are left as-is.
 @return this element
 */
- (OrgJsoupNodesElement *)empty;

- (jboolean)isEqual:(id)o;

/*!
 @brief Gets the first element sibling of this element.
 @return the first sibling that is an element (aka the parent's first element child)
 */
- (OrgJsoupNodesElement *)firstElementSibling;

/*!
 @brief Find all elements under this element (including self, and children of children).
 @return all elements
 */
- (OrgJsoupSelectElements *)getAllElements;

/*!
 @brief Find an element by ID, including or under this element.
 <p>
  Note that this finds the first matching ID, starting with this element. If you search down from a different
  starting point, it is possible to find a different element by ID. For unique element by ID within a Document,
  use <code>Document.getElementById(String)</code>
 @param id_ The ID to search for.
 @return The first matching element by ID, starting with this element, or null if none found.
 */
- (OrgJsoupNodesElement *)getElementByIdWithNSString:(NSString *)id_;

/*!
 @brief Find elements that have a named attribute set.Case insensitive.
 @param key name of the attribute, e.g. <code>href</code>
 @return elements that have this attribute, empty if none
 */
- (OrgJsoupSelectElements *)getElementsByAttributeWithNSString:(NSString *)key;

/*!
 @brief Find elements that have an attribute name starting with the supplied prefix.Use <code>data-</code> to find elements
  that have HTML5 datasets.
 @param keyPrefix name prefix of the attribute e.g. <code>data-</code>
 @return elements that have attribute names that start with with the prefix, empty if none.
 */
- (OrgJsoupSelectElements *)getElementsByAttributeStartingWithNSString:(NSString *)keyPrefix;

/*!
 @brief Find elements that have an attribute with the specific value.Case insensitive.
 @param key name of the attribute
 @param value value of the attribute
 @return elements that have this attribute with this value, empty if none
 */
- (OrgJsoupSelectElements *)getElementsByAttributeValueWithNSString:(NSString *)key
                                                       withNSString:(NSString *)value;

/*!
 @brief Find elements that have attributes whose value contains the match string.Case insensitive.
 @param key name of the attribute
 @param match substring of value to search for
 @return elements that have attributes containing this text
 */
- (OrgJsoupSelectElements *)getElementsByAttributeValueContainingWithNSString:(NSString *)key
                                                                 withNSString:(NSString *)match;

/*!
 @brief Find elements that have attributes that end with the value suffix.Case insensitive.
 @param key name of the attribute
 @param valueSuffix end of the attribute value
 @return elements that have attributes that end with the value suffix
 */
- (OrgJsoupSelectElements *)getElementsByAttributeValueEndingWithNSString:(NSString *)key
                                                             withNSString:(NSString *)valueSuffix;

/*!
 @brief Find elements that have attributes whose values match the supplied regular expression.
 @param key name of the attribute
 @param pattern compiled regular expression to match against attribute values
 @return elements that have attributes matching this regular expression
 */
- (OrgJsoupSelectElements *)getElementsByAttributeValueMatchingWithNSString:(NSString *)key
                                                   withJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern;

/*!
 @brief Find elements that have attributes whose values match the supplied regular expression.
 @param key name of the attribute
 @param regex regular expression to match against attribute values. You can use  <a href="http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded"> embedded flags </a>  (such as (?i) and (?m) to control regex options.
 @return elements that have attributes matching this regular expression
 */
- (OrgJsoupSelectElements *)getElementsByAttributeValueMatchingWithNSString:(NSString *)key
                                                               withNSString:(NSString *)regex;

/*!
 @brief Find elements that either do not have this attribute, or have it with a different value.Case insensitive.
 @param key name of the attribute
 @param value value of the attribute
 @return elements that do not have a matching attribute
 */
- (OrgJsoupSelectElements *)getElementsByAttributeValueNotWithNSString:(NSString *)key
                                                          withNSString:(NSString *)value;

/*!
 @brief Find elements that have attributes that start with the value prefix.Case insensitive.
 @param key name of the attribute
 @param valuePrefix start of attribute value
 @return elements that have attributes that start with the value prefix
 */
- (OrgJsoupSelectElements *)getElementsByAttributeValueStartingWithNSString:(NSString *)key
                                                               withNSString:(NSString *)valuePrefix;

/*!
 @brief Find elements that have this class, including or under this element.Case insensitive.
 <p>
  Elements can have multiple classes (e.g. <code><div class="header round first"></code>. This method
  checks each class, so you can find the above with <code>el.getElementsByClass("header");</code>.
 @param className_ the name of the class to search for.
 @return elements with the supplied class name, empty if none
 - seealso: #hasClass(String)
 - seealso: #classNames()
 */
- (OrgJsoupSelectElements *)getElementsByClassWithNSString:(NSString *)className_;

/*!
 @brief Find elements whose sibling index is equal to the supplied index.
 @param index 0-based index
 @return elements equal to index
 */
- (OrgJsoupSelectElements *)getElementsByIndexEqualsWithInt:(jint)index;

/*!
 @brief Find elements whose sibling index is greater than the supplied index.
 @param index 0-based index
 @return elements greater than index
 */
- (OrgJsoupSelectElements *)getElementsByIndexGreaterThanWithInt:(jint)index;

/*!
 @brief Find elements whose sibling index is less than the supplied index.
 @param index 0-based index
 @return elements less than index
 */
- (OrgJsoupSelectElements *)getElementsByIndexLessThanWithInt:(jint)index;

/*!
 @brief Finds elements, including and recursively under this element, with the specified tag name.
 @param tagName The tag name to search for (case insensitively).
 @return a matching unmodifiable list of elements. Will be empty if this element and none of its children match.
 */
- (OrgJsoupSelectElements *)getElementsByTagWithNSString:(NSString *)tagName;

/*!
 @brief Find elements that directly contain the specified string.The search is case insensitive.
 The text must appear directly
  in the element, not in any of its descendants.
 @param searchText to look for in the element's own text
 @return elements that contain the string, case insensitive.
 - seealso: Element#ownText()
 */
- (OrgJsoupSelectElements *)getElementsContainingOwnTextWithNSString:(NSString *)searchText;

/*!
 @brief Find elements that contain the specified string.The search is case insensitive.
 The text may appear directly
  in the element, or in any of its descendants.
 @param searchText to look for in the element's text
 @return elements that contain the string, case insensitive.
 - seealso: Element#text()
 */
- (OrgJsoupSelectElements *)getElementsContainingTextWithNSString:(NSString *)searchText;

/*!
 @brief Find elements whose own text matches the supplied regular expression.
 @param pattern regular expression to match text against
 @return elements matching the supplied regular expression.
 - seealso: Element#ownText()
 */
- (OrgJsoupSelectElements *)getElementsMatchingOwnTextWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern;

/*!
 @brief Find elements whose text matches the supplied regular expression.
 @param regex regular expression to match text against. You can use  <a href="http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded"> embedded flags </a>  (such as (?i) and (?m) to control regex options.
 @return elements matching the supplied regular expression.
 - seealso: Element#ownText()
 */
- (OrgJsoupSelectElements *)getElementsMatchingOwnTextWithNSString:(NSString *)regex;

/*!
 @brief Find elements whose text matches the supplied regular expression.
 @param pattern regular expression to match text against
 @return elements matching the supplied regular expression.
 - seealso: Element#text()
 */
- (OrgJsoupSelectElements *)getElementsMatchingTextWithJavaUtilRegexPattern:(JavaUtilRegexPattern *)pattern;

/*!
 @brief Find elements whose text matches the supplied regular expression.
 @param regex regular expression to match text against. You can use  <a href="http://java.sun.com/docs/books/tutorial/essential/regex/pattern.html#embedded"> embedded flags </a>  (such as (?i) and (?m) to control regex options.
 @return elements matching the supplied regular expression.
 - seealso: Element#text()
 */
- (OrgJsoupSelectElements *)getElementsMatchingTextWithNSString:(NSString *)regex;

/*!
 @brief Tests if this element has a class.Case insensitive.
 @param className_ name of class to check for
 @return true if it does, false if not
 */
- (jboolean)hasClassWithNSString:(NSString *)className_;

- (NSUInteger)hash;

/*!
 @brief Test if this element has any text content (that is not just whitespace).
 @return true if element has non-blank text content.
 */
- (jboolean)hasText;

/*!
 @brief Retrieves the element's inner HTML.E.g. on a <code><div></code> with one empty <code><p></code>, would return 
 <code><p></p></code>.
 (Whereas <code>outerHtml()</code> would return <code><div><p></p></div></code>.)
 @return String of HTML.
 - seealso: #outerHtml()
 */
- (NSString *)html;

/*!
 @brief Set this element's inner HTML.Clears the existing HTML first.
 @param html HTML to parse and set into this element
 @return this element
 - seealso: #append(String)
 */
- (OrgJsoupNodesElement *)htmlWithNSString:(NSString *)html;

/*!
 @brief Get the <code>id</code> attribute of this element.
 @return The id attribute, if present, or an empty string if not.
 */
- (NSString *)id__;

/*!
 @brief Inserts the given child nodes into this element at the specified index.Current nodes will be shifted to the
  right.
 The inserted nodes will be moved from their current parent. To prevent moving, copy the nodes first.
 @param index 0-based index to insert children at. Specify <code>0</code>  to insert at the start, <code>-1</code>  at the
   end
 @param children child nodes to insert
 @return this element, for chaining.
 */
- (OrgJsoupNodesElement *)insertChildrenWithInt:(jint)index
                         withJavaUtilCollection:(id<JavaUtilCollection>)children;

/*!
 @brief Test if this element is a block-level element.
 (E.g. <code><div> == true</code> or an inline element 
 <code><p> == false</code>).
 @return true if block, false if not (and thus inline)
 */
- (jboolean)isBlock;

/*!
 @brief Gets the last element sibling of this element
 @return the last sibling that is an element (aka the parent's last element child)
 */
- (OrgJsoupNodesElement *)lastElementSibling;

/*!
 @brief Gets the next sibling element of this element.E.g., if a <code>div</code> contains two <code>p</code>s, 
  the <code>nextElementSibling</code> of the first <code>p</code> is the second <code>p</code>.
 <p>
  This is similar to <code>nextSibling()</code>, but specifically finds only Elements 
 </p>
 @return the next element, or null if there is no next element
 - seealso: #previousElementSibling()
 */
- (OrgJsoupNodesElement *)nextElementSibling;

- (NSString *)nodeName;

/*!
 @brief Gets the text owned by this element only; does not get the combined text of all children.
 <p>
  For example, given HTML <code><p>Hello <b>there</b> now!</p></code>, <code>p.ownText()</code> returns <code>"Hello now!"</code>,
  whereas <code>p.text()</code> returns <code>"Hello there now!"</code>.
  Note that the text within the <code>b</code> element is not returned, as it is not a direct child of the <code>p</code> element.
 @return unencoded text, or empty string if none.
 - seealso: #text()
 - seealso: #textNodes()
 */
- (NSString *)ownText;

- (OrgJsoupNodesElement *)parent;

/*!
 @brief Get this element's parent and ancestors, up to the document root.
 @return this element's stack of parents, closest first.
 */
- (OrgJsoupSelectElements *)parents;

/*!
 @brief Add inner HTML into this element.The supplied HTML will be parsed, and each node prepended to the start of the element's children.
 @param html HTML to add inside this element, before the existing HTML
 @return this element
 - seealso: #html(String)
 */
- (OrgJsoupNodesElement *)prependWithNSString:(NSString *)html;

/*!
 @brief Add a node to the start of this element's children.
 @param child node to add.
 @return this element, so that you can add more child nodes or elements.
 */
- (OrgJsoupNodesElement *)prependChildWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)child;

/*!
 @brief Create a new element by tag name, and add it as the first child.
 @param tagName the name of the tag (e.g. <code>div</code> ).
 @return the new element, to allow you to add content to it, e.g.:
   <code>parent.prependElement("h1").attr("id", "header").text("Welcome");</code>
 */
- (OrgJsoupNodesElement *)prependElementWithNSString:(NSString *)tagName;

/*!
 @brief Create and prepend a new TextNode to this element.
 @param text the unencoded text to add
 @return this element
 */
- (OrgJsoupNodesElement *)prependTextWithNSString:(NSString *)text;

/*!
 @brief Gets the previous element sibling of this element.
 @return the previous element, or null if there is no previous element
 - seealso: #nextElementSibling()
 */
- (OrgJsoupNodesElement *)previousElementSibling;

/*!
 @brief Remove a class name from this element's <code>class</code> attribute.
 @param className_ class name to remove
 @return this element
 */
- (OrgJsoupNodesElement *)removeClassWithNSString:(NSString *)className_;

/*!
 @brief Find elements that match the <code>Selector</code> CSS query, with this element as the starting context.Matched elements
  may include this element, or any of its children.
 <p>
  This method is generally more powerful to use than the DOM-type <code>getElementBy*</code> methods, because
  multiple filters can be combined, e.g.: 
 </p>
  <ul>
  <li><code>el.select("a[href]")</code> - finds links (<code>a</code> tags with <code>href</code> attributes) 
 <li><code>el.select("a[href*=example.com]")</code> - finds links pointing to example.com (loosely) 
 </ul>
  <p>
  See the query syntax documentation in <code>org.jsoup.select.Selector</code>.
  </p>
 @param cssQuery a <code>Selector</code>  CSS-like query
 @return elements that match the query (empty if none match)
 - seealso: org.jsoup.select.Selector
 @throw Selector.SelectorParseException(unchecked) on an invalid CSS query.
 */
- (OrgJsoupSelectElements *)selectWithNSString:(NSString *)cssQuery;

/*!
 @brief Get sibling elements.If the element has no sibling elements, returns an empty list.
 An element is not a sibling
  of itself, so will not be included in the returned list.
 @return sibling elements
 */
- (OrgJsoupSelectElements *)siblingElements;

/*!
 @brief Get the Tag for this element.
 @return the tag object
 */
- (OrgJsoupParserTag *)tag;

/*!
 @brief Get the name of the tag for this element.E.g.
 <code>div</code>
 @return the tag name
 */
- (NSString *)tagName;

/*!
 @brief Change the tag of this element.For example, convert a <code><span></code> to a <code><div></code> with 
 <code>el.tagName("div");</code>.
 @param tagName new tag name for this element
 @return this element, for chaining
 */
- (OrgJsoupNodesElement *)tagNameWithNSString:(NSString *)tagName;

/*!
 @brief Gets the combined text of this element and all its children.Whitespace is normalized and trimmed.
 <p>
  For example, given HTML <code><p>Hello  <b>there</b> now! </p></code>, <code>p.text()</code> returns <code>"Hello there now!"</code>
 @return unencoded text, or empty string if none.
 - seealso: #ownText()
 - seealso: #textNodes()
 */
- (NSString *)text;

/*!
 @brief Set the text of this element.Any existing contents (text or elements) will be cleared
 @param text unencoded text
 @return this element
 */
- (OrgJsoupNodesElement *)textWithNSString:(NSString *)text;

/*!
 @brief Get this element's child text nodes.The list is unmodifiable but the text nodes may be manipulated.
 <p>
  This is effectively a filter on <code>childNodes()</code> to get Text nodes.
 @return child text nodes. If this element has no text nodes, returns an
  empty list. 
 </p>
  For example, with the input HTML: <code><p>One <span>Two</span> Three <br> Four</p></code> with the <code>p</code> element selected: 
 <ul>
      <li><code>p.text()</code> = <code>"One Two Three Four"</code></li>
      <li><code>p.ownText()</code> = <code>"One Three Four"</code></li>
      <li><code>p.children()</code> = <code>Elements[<span>, <br>]</code></li>
      <li><code>p.childNodes()</code> = <code>List<Node>["One ", <span>, " Three ", <br>, " Four"]</code></li>
      <li><code>p.textNodes()</code> = <code>List<TextNode>["One ", " Three ", " Four"]</code></li>
  </ul>
 */
- (id<JavaUtilList>)textNodes;

/*!
 @brief Toggle a class name on this element's <code>class</code> attribute: if present, remove it; otherwise add it.
 @param className_ class name to toggle
 @return this element
 */
- (OrgJsoupNodesElement *)toggleClassWithNSString:(NSString *)className_;

- (NSString *)description;

/*!
 @brief Get the value of a form element (input, textarea, etc).
 @return the value of the form element, or empty string if not set.
 */
- (NSString *)val;

/*!
 @brief Set the value of a form element (input, textarea, etc).
 @param value value to set
 @return this element (for chaining)
 */
- (OrgJsoupNodesElement *)valWithNSString:(NSString *)value;

/*!
 @brief Wrap the supplied HTML around this element.
 @param html HTML to wrap around this element, e.g. <code><div class="head"></div></code> . Can be arbitrarily deep.
 @return this element, for chaining.
 */
- (OrgJsoupNodesElement *)wrapWithNSString:(NSString *)html;

#pragma mark Package-Private

- (void)outerHtmlHeadWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                                       withInt:(jint)depth
      withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outArg;

- (void)outerHtmlTailWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                                       withInt:(jint)depth
      withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outArg;

+ (jboolean)preserveWhitespaceWithOrgJsoupNodesNode:(OrgJsoupNodesNode *)node;

// Disallowed inherited constructors, do not use.

- (instancetype __nonnull)init NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype __nonnull)initWithNSString:(NSString *)arg0
               withOrgJsoupNodesAttributes:(OrgJsoupNodesAttributes *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_STATIC_INIT(OrgJsoupNodesElement)

FOUNDATION_EXPORT void OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_withOrgJsoupNodesAttributes_(OrgJsoupNodesElement *self, OrgJsoupParserTag *tag, NSString *baseUri, OrgJsoupNodesAttributes *attributes);

FOUNDATION_EXPORT OrgJsoupNodesElement *new_OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_withOrgJsoupNodesAttributes_(OrgJsoupParserTag *tag, NSString *baseUri, OrgJsoupNodesAttributes *attributes) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupNodesElement *create_OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_withOrgJsoupNodesAttributes_(OrgJsoupParserTag *tag, NSString *baseUri, OrgJsoupNodesAttributes *attributes);

FOUNDATION_EXPORT void OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_(OrgJsoupNodesElement *self, OrgJsoupParserTag *tag, NSString *baseUri);

FOUNDATION_EXPORT OrgJsoupNodesElement *new_OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_(OrgJsoupParserTag *tag, NSString *baseUri) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupNodesElement *create_OrgJsoupNodesElement_initWithOrgJsoupParserTag_withNSString_(OrgJsoupParserTag *tag, NSString *baseUri);

FOUNDATION_EXPORT jboolean OrgJsoupNodesElement_preserveWhitespaceWithOrgJsoupNodesNode_(OrgJsoupNodesNode *node);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupNodesElement)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgJsoupNodesElement")
