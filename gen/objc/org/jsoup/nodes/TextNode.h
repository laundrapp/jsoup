//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jsoup/src/main/java/org/jsoup/nodes/TextNode.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJsoupNodesTextNode")
#ifdef RESTRICT_OrgJsoupNodesTextNode
#define INCLUDE_ALL_OrgJsoupNodesTextNode 0
#else
#define INCLUDE_ALL_OrgJsoupNodesTextNode 1
#endif
#undef RESTRICT_OrgJsoupNodesTextNode

#if !defined (OrgJsoupNodesTextNode_) && (INCLUDE_ALL_OrgJsoupNodesTextNode || defined(INCLUDE_OrgJsoupNodesTextNode))
#define OrgJsoupNodesTextNode_

#define RESTRICT_OrgJsoupNodesNode 1
#define INCLUDE_OrgJsoupNodesNode 1
#include "org/jsoup/nodes/Node.h"

@class JavaLangStringBuilder;
@class OrgJsoupNodesAttributes;
@class OrgJsoupNodesDocument_OutputSettings;

/*!
 @brief A text node.
 @author Jonathan Hedley, jonathan@@hedley.net
 */
@interface OrgJsoupNodesTextNode : OrgJsoupNodesNode {
 @public
  NSString *text_;
}

#pragma mark Public

/*!
 @brief Create a new TextNode representing the supplied (unencoded) text).
 @param text raw text
 @param baseUri base uri
 - seealso: #createFromEncoded(String, String)
 */
- (instancetype)initWithNSString:(NSString *)text
                    withNSString:(NSString *)baseUri;

- (NSString *)absUrlWithNSString:(NSString *)attributeKey;

- (NSString *)attrWithNSString:(NSString *)attributeKey;

- (OrgJsoupNodesNode *)attrWithNSString:(NSString *)attributeKey
                           withNSString:(NSString *)attributeValue;

- (OrgJsoupNodesAttributes *)attributes;

/*!
 @brief Create a new TextNode from HTML encoded (aka escaped) data.
 @param encodedText Text containing encoded HTML (e.g.  &amp; lt;)
 @param baseUri Base uri
 @return TextNode containing unencoded data (e.g. &lt;)
 */
+ (OrgJsoupNodesTextNode *)createFromEncodedWithNSString:(NSString *)encodedText
                                            withNSString:(NSString *)baseUri;

- (jboolean)isEqual:(id)o;

/*!
 @brief Get the (unencoded) text of this text node, including any newlines and spaces present in the original.
 @return text
 */
- (NSString *)getWholeText;

- (jboolean)hasAttrWithNSString:(NSString *)attributeKey;

- (NSUInteger)hash;

/*!
 @brief Test if this text node is blank -- that is, empty or only whitespace (including newlines).
 @return true if this document is empty or only whitespace, false if it contains any text content.
 */
- (jboolean)isBlank;

- (NSString *)nodeName;

- (OrgJsoupNodesNode *)removeAttrWithNSString:(NSString *)attributeKey;

/*!
 @brief Split this text node into two nodes at the specified string offset.After splitting, this node will contain the
  original text up to the offset, and will have a new text node sibling containing the text after the offset.
 @param offset string offset point to split node at.
 @return the newly created text node containing the text after the offset.
 */
- (OrgJsoupNodesTextNode *)splitTextWithInt:(jint)offset;

/*!
 @brief Get the text content of this text node.
 @return Unencoded, normalised text.
 - seealso: TextNode#getWholeText()
 */
- (NSString *)text;

/*!
 @brief Set the text content of this text node.
 @param text unencoded text
 @return this, for chaining
 */
- (OrgJsoupNodesTextNode *)textWithNSString:(NSString *)text;

- (NSString *)description;

#pragma mark Package-Private

+ (jboolean)lastCharIsWhitespaceWithJavaLangStringBuilder:(JavaLangStringBuilder *)sb;

+ (NSString *)normaliseWhitespaceWithNSString:(NSString *)text;

- (void)outerHtmlHeadWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                                       withInt:(jint)depth
      withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outArg;

- (void)outerHtmlTailWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                                       withInt:(jint)depth
      withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outArg;

+ (NSString *)stripLeadingWhitespaceWithNSString:(NSString *)text;

// Disallowed inherited constructors, do not use.

- (instancetype)init NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0 NS_UNAVAILABLE;

- (instancetype)initWithNSString:(NSString *)arg0
     withOrgJsoupNodesAttributes:(OrgJsoupNodesAttributes *)arg1 NS_UNAVAILABLE;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupNodesTextNode)

J2OBJC_FIELD_SETTER(OrgJsoupNodesTextNode, text_, NSString *)

FOUNDATION_EXPORT void OrgJsoupNodesTextNode_initWithNSString_withNSString_(OrgJsoupNodesTextNode *self, NSString *text, NSString *baseUri);

FOUNDATION_EXPORT OrgJsoupNodesTextNode *new_OrgJsoupNodesTextNode_initWithNSString_withNSString_(NSString *text, NSString *baseUri) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupNodesTextNode *create_OrgJsoupNodesTextNode_initWithNSString_withNSString_(NSString *text, NSString *baseUri);

FOUNDATION_EXPORT OrgJsoupNodesTextNode *OrgJsoupNodesTextNode_createFromEncodedWithNSString_withNSString_(NSString *encodedText, NSString *baseUri);

FOUNDATION_EXPORT NSString *OrgJsoupNodesTextNode_normaliseWhitespaceWithNSString_(NSString *text);

FOUNDATION_EXPORT NSString *OrgJsoupNodesTextNode_stripLeadingWhitespaceWithNSString_(NSString *text);

FOUNDATION_EXPORT jboolean OrgJsoupNodesTextNode_lastCharIsWhitespaceWithJavaLangStringBuilder_(JavaLangStringBuilder *sb);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupNodesTextNode)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJsoupNodesTextNode")
