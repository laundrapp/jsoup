//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jsoup/src/main/java/org/jsoup/nodes/Attributes.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJsoupNodesAttributes")
#ifdef RESTRICT_OrgJsoupNodesAttributes
#define INCLUDE_ALL_OrgJsoupNodesAttributes 0
#else
#define INCLUDE_ALL_OrgJsoupNodesAttributes 1
#endif
#undef RESTRICT_OrgJsoupNodesAttributes

#if !defined (OrgJsoupNodesAttributes_) && (INCLUDE_ALL_OrgJsoupNodesAttributes || defined(INCLUDE_OrgJsoupNodesAttributes))
#define OrgJsoupNodesAttributes_

#define RESTRICT_JavaLangIterable 1
#define INCLUDE_JavaLangIterable 1
#include "java/lang/Iterable.h"

@class JavaLangStringBuilder;
@class OrgJsoupNodesAttribute;
@class OrgJsoupNodesDocument_OutputSettings;
@protocol JavaUtilFunctionConsumer;
@protocol JavaUtilIterator;
@protocol JavaUtilList;
@protocol JavaUtilMap;
@protocol JavaUtilSpliterator;

/*!
 @brief The attributes of an Element.
 <p>
  Attributes are treated as a map: there can be only one value associated with an attribute key. 
 </p>
  <p>
  Attribute key and value comparisons are done case insensitively, and keys are normalised to
  lower-case. 
 </p>
 @author Jonathan Hedley, jonathan@@hedley.net
 */
@interface OrgJsoupNodesAttributes : NSObject < JavaLangIterable, NSCopying >

#pragma mark Public

- (instancetype)init;

/*!
 @brief Add all the attributes from the incoming set to this set.
 @param incoming attributes to add to these attributes.
 */
- (void)addAllWithOrgJsoupNodesAttributes:(OrgJsoupNodesAttributes *)incoming;

/*!
 @brief Get the attributes as a List, for iteration.Do not modify the keys of the attributes via this view, as changes
      to keys will not be recognised in the containing set.
 @return an view of the attributes as a List.
 */
- (id<JavaUtilList>)asList;

- (OrgJsoupNodesAttributes *)java_clone;

/*!
 @brief Retrieves a filtered view of attributes that are HTML5 custom data attributes; that is, attributes with keys
  starting with <code>data-</code>.
 @return map of custom data attributes.
 */
- (id<JavaUtilMap>)dataset;

/*!
 @brief Checks if these attributes are equal to another set of attributes, by comparing the two sets
 @param o attributes to compare with
 @return if both sets of attributes have the same content
 */
- (jboolean)isEqual:(id)o;

/*!
 @brief Get an attribute value by key.
 @param key the attribute key
 @return the attribute value if set; or empty string if not set.
 - seealso: #hasKey(String)
 */
- (NSString *)getWithNSString:(NSString *)key;

/*!
 @brief Calculates the hashcode of these attributes, by iterating all attributes and summing their hashcodes.
 @return calculated hashcode
 */
- (NSUInteger)hash;

/*!
 @brief Tests if these attributes contain an attribute with this key.
 @param key key to check for
 @return true if key exists, false otherwise
 */
- (jboolean)hasKeyWithNSString:(NSString *)key;

/*!
 @brief Get the HTML representation of these attributes.
 @return HTML
 */
- (NSString *)html;

- (id<JavaUtilIterator>)iterator;

/*!
 @brief Set a new attribute, or replace an existing one by key.
 @param attribute attribute
 */
- (void)putWithOrgJsoupNodesAttribute:(OrgJsoupNodesAttribute *)attribute;

/*!
 @brief Set a new boolean attribute, remove attribute if value is false.
 @param key attribute key
 @param value attribute value
 */
- (void)putWithNSString:(NSString *)key
            withBoolean:(jboolean)value;

/*!
 @brief Set a new attribute, or replace an existing one by key.
 @param key attribute key
 @param value attribute value
 */
- (void)putWithNSString:(NSString *)key
           withNSString:(NSString *)value;

/*!
 @brief Remove an attribute by key.
 @param key attribute key to remove
 */
- (void)removeWithNSString:(NSString *)key;

/*!
 @brief Get the number of attributes in this set.
 @return size
 */
- (jint)size;

- (NSString *)description;

#pragma mark Package-Private

- (void)htmlWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outArg;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupNodesAttributes)

inline NSString *OrgJsoupNodesAttributes_get_dataPrefix(void);
/*! INTERNAL ONLY - Use accessor function from above. */
FOUNDATION_EXPORT NSString *OrgJsoupNodesAttributes_dataPrefix;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupNodesAttributes, dataPrefix, NSString *)

FOUNDATION_EXPORT void OrgJsoupNodesAttributes_init(OrgJsoupNodesAttributes *self);

FOUNDATION_EXPORT OrgJsoupNodesAttributes *new_OrgJsoupNodesAttributes_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupNodesAttributes *create_OrgJsoupNodesAttributes_init(void);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupNodesAttributes)

#endif

#pragma pop_macro("INCLUDE_ALL_OrgJsoupNodesAttributes")
