//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jsoup/src/main/java/org/jsoup/nodes/Entities.java
//

#include "IOSClass.h"
#include "IOSObjectArray.h"
#include "IOSPrimitiveArray.h"
#include "J2ObjC_source.h"
#include "java/io/IOException.h"
#include "java/io/InputStream.h"
#include "java/lang/Character.h"
#include "java/lang/Enum.h"
#include "java/lang/IllegalArgumentException.h"
#include "java/lang/Integer.h"
#include "java/lang/StringBuilder.h"
#include "java/nio/charset/Charset.h"
#include "java/nio/charset/CharsetEncoder.h"
#include "java/util/HashMap.h"
#include "java/util/Map.h"
#include "java/util/MissingResourceException.h"
#include "java/util/Properties.h"
#include "java/util/Set.h"
#include "org/jsoup/helper/StringUtil.h"
#include "org/jsoup/nodes/Document.h"
#include "org/jsoup/nodes/Entities.h"
#include "org/jsoup/parser/Parser.h"

@class OrgJsoupNodesEntities_CoreCharset;

@interface OrgJsoupNodesEntities ()

- (instancetype)init;

+ (jboolean)canEncodeWithOrgJsoupNodesEntities_CoreCharset:(OrgJsoupNodesEntities_CoreCharset *)charset
                                                  withChar:(jchar)c
                          withJavaNioCharsetCharsetEncoder:(JavaNioCharsetCharsetEncoder *)fallback;

+ (id<JavaUtilMap>)loadEntitiesWithNSString:(NSString *)filename;

+ (id<JavaUtilMap>)toCharacterKeyWithJavaUtilMap:(id<JavaUtilMap>)inMap;

@end

inline id<JavaUtilMap> OrgJsoupNodesEntities_get_full(void);
static id<JavaUtilMap> OrgJsoupNodesEntities_full;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupNodesEntities, full, id<JavaUtilMap>)

inline id<JavaUtilMap> OrgJsoupNodesEntities_get_xhtmlByVal(void);
static id<JavaUtilMap> OrgJsoupNodesEntities_xhtmlByVal;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupNodesEntities, xhtmlByVal, id<JavaUtilMap>)

inline id<JavaUtilMap> OrgJsoupNodesEntities_get_base(void);
static id<JavaUtilMap> OrgJsoupNodesEntities_base;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupNodesEntities, base, id<JavaUtilMap>)

inline id<JavaUtilMap> OrgJsoupNodesEntities_get_baseByVal(void);
static id<JavaUtilMap> OrgJsoupNodesEntities_baseByVal;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupNodesEntities, baseByVal, id<JavaUtilMap>)

inline id<JavaUtilMap> OrgJsoupNodesEntities_get_fullByVal(void);
static id<JavaUtilMap> OrgJsoupNodesEntities_fullByVal;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupNodesEntities, fullByVal, id<JavaUtilMap>)

inline IOSObjectArray *OrgJsoupNodesEntities_get_xhtmlArray(void);
static IOSObjectArray *OrgJsoupNodesEntities_xhtmlArray;
J2OBJC_STATIC_FIELD_OBJ_FINAL(OrgJsoupNodesEntities, xhtmlArray, IOSObjectArray *)

__attribute__((unused)) static void OrgJsoupNodesEntities_init(OrgJsoupNodesEntities *self);

__attribute__((unused)) static OrgJsoupNodesEntities *new_OrgJsoupNodesEntities_init(void) NS_RETURNS_RETAINED;

__attribute__((unused)) static OrgJsoupNodesEntities *create_OrgJsoupNodesEntities_init(void);

__attribute__((unused)) static jboolean OrgJsoupNodesEntities_canEncodeWithOrgJsoupNodesEntities_CoreCharset_withChar_withJavaNioCharsetCharsetEncoder_(OrgJsoupNodesEntities_CoreCharset *charset, jchar c, JavaNioCharsetCharsetEncoder *fallback);

__attribute__((unused)) static id<JavaUtilMap> OrgJsoupNodesEntities_loadEntitiesWithNSString_(NSString *filename);

__attribute__((unused)) static id<JavaUtilMap> OrgJsoupNodesEntities_toCharacterKeyWithJavaUtilMap_(id<JavaUtilMap> inMap);

@interface OrgJsoupNodesEntities_EscapeMode () {
 @public
  id<JavaUtilMap> map_;
}

@end

J2OBJC_FIELD_SETTER(OrgJsoupNodesEntities_EscapeMode, map_, id<JavaUtilMap>)

__attribute__((unused)) static void OrgJsoupNodesEntities_EscapeMode_initWithJavaUtilMap_withNSString_withInt_(OrgJsoupNodesEntities_EscapeMode *self, id<JavaUtilMap> map, NSString *__name, jint __ordinal);

typedef NS_ENUM(NSUInteger, OrgJsoupNodesEntities_CoreCharset_Enum) {
  OrgJsoupNodesEntities_CoreCharset_Enum_ascii = 0,
  OrgJsoupNodesEntities_CoreCharset_Enum_utf = 1,
  OrgJsoupNodesEntities_CoreCharset_Enum_fallback = 2,
};

@interface OrgJsoupNodesEntities_CoreCharset : JavaLangEnum

+ (OrgJsoupNodesEntities_CoreCharset *)byNameWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

+ (OrgJsoupNodesEntities_CoreCharset *)valueOfWithNSString:(NSString *)name;

@end

J2OBJC_STATIC_INIT(OrgJsoupNodesEntities_CoreCharset)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgJsoupNodesEntities_CoreCharset *OrgJsoupNodesEntities_CoreCharset_values_[];

inline OrgJsoupNodesEntities_CoreCharset *OrgJsoupNodesEntities_CoreCharset_get_ascii(void);
J2OBJC_ENUM_CONSTANT(OrgJsoupNodesEntities_CoreCharset, ascii)

inline OrgJsoupNodesEntities_CoreCharset *OrgJsoupNodesEntities_CoreCharset_get_utf(void);
J2OBJC_ENUM_CONSTANT(OrgJsoupNodesEntities_CoreCharset, utf)

inline OrgJsoupNodesEntities_CoreCharset *OrgJsoupNodesEntities_CoreCharset_get_fallback(void);
J2OBJC_ENUM_CONSTANT(OrgJsoupNodesEntities_CoreCharset, fallback)

__attribute__((unused)) static void OrgJsoupNodesEntities_CoreCharset_initWithNSString_withInt_(OrgJsoupNodesEntities_CoreCharset *self, NSString *__name, jint __ordinal);

__attribute__((unused)) static OrgJsoupNodesEntities_CoreCharset *OrgJsoupNodesEntities_CoreCharset_byNameWithNSString_(NSString *name);

__attribute__((unused)) static IOSObjectArray *OrgJsoupNodesEntities_CoreCharset_values(void);

__attribute__((unused)) static OrgJsoupNodesEntities_CoreCharset *OrgJsoupNodesEntities_CoreCharset_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgJsoupNodesEntities_CoreCharset *OrgJsoupNodesEntities_CoreCharset_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupNodesEntities_CoreCharset)

J2OBJC_INITIALIZED_DEFN(OrgJsoupNodesEntities)

@implementation OrgJsoupNodesEntities

J2OBJC_IGNORE_DESIGNATED_BEGIN
- (instancetype)init {
  OrgJsoupNodesEntities_init(self);
  return self;
}
J2OBJC_IGNORE_DESIGNATED_END

+ (jboolean)isNamedEntityWithNSString:(NSString *)name {
  return OrgJsoupNodesEntities_isNamedEntityWithNSString_(name);
}

+ (jboolean)isBaseNamedEntityWithNSString:(NSString *)name {
  return OrgJsoupNodesEntities_isBaseNamedEntityWithNSString_(name);
}

+ (JavaLangCharacter *)getCharacterByNameWithNSString:(NSString *)name {
  return OrgJsoupNodesEntities_getCharacterByNameWithNSString_(name);
}

+ (NSString *)escapeWithNSString:(NSString *)string
withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outArg {
  return OrgJsoupNodesEntities_escapeWithNSString_withOrgJsoupNodesDocument_OutputSettings_(string, outArg);
}

+ (void)escapeWithJavaLangStringBuilder:(JavaLangStringBuilder *)accum
                           withNSString:(NSString *)string
withOrgJsoupNodesDocument_OutputSettings:(OrgJsoupNodesDocument_OutputSettings *)outArg
                            withBoolean:(jboolean)inAttribute
                            withBoolean:(jboolean)normaliseWhite
                            withBoolean:(jboolean)stripLeadingWhite {
  OrgJsoupNodesEntities_escapeWithJavaLangStringBuilder_withNSString_withOrgJsoupNodesDocument_OutputSettings_withBoolean_withBoolean_withBoolean_(accum, string, outArg, inAttribute, normaliseWhite, stripLeadingWhite);
}

+ (NSString *)unescapeWithNSString:(NSString *)string {
  return OrgJsoupNodesEntities_unescapeWithNSString_(string);
}

+ (NSString *)unescapeWithNSString:(NSString *)string
                       withBoolean:(jboolean)strict {
  return OrgJsoupNodesEntities_unescapeWithNSString_withBoolean_(string, strict);
}

+ (jboolean)canEncodeWithOrgJsoupNodesEntities_CoreCharset:(OrgJsoupNodesEntities_CoreCharset *)charset
                                                  withChar:(jchar)c
                          withJavaNioCharsetCharsetEncoder:(JavaNioCharsetCharsetEncoder *)fallback {
  return OrgJsoupNodesEntities_canEncodeWithOrgJsoupNodesEntities_CoreCharset_withChar_withJavaNioCharsetCharsetEncoder_(charset, c, fallback);
}

+ (id<JavaUtilMap>)loadEntitiesWithNSString:(NSString *)filename {
  return OrgJsoupNodesEntities_loadEntitiesWithNSString_(filename);
}

+ (id<JavaUtilMap>)toCharacterKeyWithJavaUtilMap:(id<JavaUtilMap>)inMap {
  return OrgJsoupNodesEntities_toCharacterKeyWithJavaUtilMap_(inMap);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, NULL, 0x2, -1, -1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 0, 1, -1, -1, -1, -1 },
    { NULL, "Z", 0x9, 2, 1, -1, -1, -1, -1 },
    { NULL, "LJavaLangCharacter;", 0x9, 3, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 4, 5, -1, -1, -1, -1 },
    { NULL, "V", 0x8, 4, 6, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 7, 1, -1, -1, -1, -1 },
    { NULL, "LNSString;", 0x8, 7, 8, -1, -1, -1, -1 },
    { NULL, "Z", 0xa, 9, 10, -1, -1, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 11, 1, -1, 12, -1, -1 },
    { NULL, "LJavaUtilMap;", 0xa, 13, 14, -1, 15, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(init);
  methods[1].selector = @selector(isNamedEntityWithNSString:);
  methods[2].selector = @selector(isBaseNamedEntityWithNSString:);
  methods[3].selector = @selector(getCharacterByNameWithNSString:);
  methods[4].selector = @selector(escapeWithNSString:withOrgJsoupNodesDocument_OutputSettings:);
  methods[5].selector = @selector(escapeWithJavaLangStringBuilder:withNSString:withOrgJsoupNodesDocument_OutputSettings:withBoolean:withBoolean:withBoolean:);
  methods[6].selector = @selector(unescapeWithNSString:);
  methods[7].selector = @selector(unescapeWithNSString:withBoolean:);
  methods[8].selector = @selector(canEncodeWithOrgJsoupNodesEntities_CoreCharset:withChar:withJavaNioCharsetCharsetEncoder:);
  methods[9].selector = @selector(loadEntitiesWithNSString:);
  methods[10].selector = @selector(toCharacterKeyWithJavaUtilMap:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "full", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 16, 17, -1 },
    { "xhtmlByVal", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 18, 19, -1 },
    { "base", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 20, 17, -1 },
    { "baseByVal", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 21, 19, -1 },
    { "fullByVal", "LJavaUtilMap;", .constantValue.asLong = 0, 0x1a, -1, 22, 19, -1 },
    { "xhtmlArray", "[[LNSObject;", .constantValue.asLong = 0, 0x1a, -1, 23, -1, -1 },
  };
  static const void *ptrTable[] = { "isNamedEntity", "LNSString;", "isBaseNamedEntity", "getCharacterByName", "escape", "LNSString;LOrgJsoupNodesDocument_OutputSettings;", "LJavaLangStringBuilder;LNSString;LOrgJsoupNodesDocument_OutputSettings;ZZZ", "unescape", "LNSString;Z", "canEncode", "LOrgJsoupNodesEntities_CoreCharset;CLJavaNioCharsetCharsetEncoder;", "loadEntities", "(Ljava/lang/String;)Ljava/util/Map<Ljava/lang/String;Ljava/lang/Character;>;", "toCharacterKey", "LJavaUtilMap;", "(Ljava/util/Map<Ljava/lang/String;Ljava/lang/Character;>;)Ljava/util/Map<Ljava/lang/Character;Ljava/lang/String;>;", &OrgJsoupNodesEntities_full, "Ljava/util/Map<Ljava/lang/String;Ljava/lang/Character;>;", &OrgJsoupNodesEntities_xhtmlByVal, "Ljava/util/Map<Ljava/lang/Character;Ljava/lang/String;>;", &OrgJsoupNodesEntities_base, &OrgJsoupNodesEntities_baseByVal, &OrgJsoupNodesEntities_fullByVal, &OrgJsoupNodesEntities_xhtmlArray, "LOrgJsoupNodesEntities_EscapeMode;LOrgJsoupNodesEntities_CoreCharset;" };
  static const J2ObjcClassInfo _OrgJsoupNodesEntities = { "Entities", "org.jsoup.nodes", ptrTable, methods, fields, 7, 0x1, 11, 6, -1, 24, -1, -1, -1 };
  return &_OrgJsoupNodesEntities;
}

+ (void)initialize {
  if (self == [OrgJsoupNodesEntities class]) {
    JreStrongAssignAndConsume(&OrgJsoupNodesEntities_xhtmlArray, [IOSObjectArray newArrayWithObjects:(id[]){ [IOSObjectArray arrayWithObjects:(id[]){ @"quot", JavaLangInteger_valueOfWithInt_((jint) 0x00022) } count:2 type:NSObject_class_()], [IOSObjectArray arrayWithObjects:(id[]){ @"amp", JavaLangInteger_valueOfWithInt_((jint) 0x00026) } count:2 type:NSObject_class_()], [IOSObjectArray arrayWithObjects:(id[]){ @"lt", JavaLangInteger_valueOfWithInt_((jint) 0x0003C) } count:2 type:NSObject_class_()], [IOSObjectArray arrayWithObjects:(id[]){ @"gt", JavaLangInteger_valueOfWithInt_((jint) 0x0003E) } count:2 type:NSObject_class_()] } count:4 type:IOSClass_arrayType(NSObject_class_(), 1)]);
    {
      JreStrongAssignAndConsume(&OrgJsoupNodesEntities_xhtmlByVal, new_JavaUtilHashMap_init());
      JreStrongAssign(&OrgJsoupNodesEntities_base, OrgJsoupNodesEntities_loadEntitiesWithNSString_(@"entities-base.properties"));
      JreStrongAssign(&OrgJsoupNodesEntities_baseByVal, OrgJsoupNodesEntities_toCharacterKeyWithJavaUtilMap_(OrgJsoupNodesEntities_base));
      JreStrongAssign(&OrgJsoupNodesEntities_full, OrgJsoupNodesEntities_loadEntitiesWithNSString_(@"entities-full.properties"));
      JreStrongAssign(&OrgJsoupNodesEntities_fullByVal, OrgJsoupNodesEntities_toCharacterKeyWithJavaUtilMap_(OrgJsoupNodesEntities_full));
      {
        IOSObjectArray *a__ = OrgJsoupNodesEntities_xhtmlArray;
        IOSObjectArray * const *b__ = a__->buffer_;
        IOSObjectArray * const *e__ = b__ + a__->size_;
        while (b__ < e__) {
          IOSObjectArray *entity = *b__++;
          JavaLangCharacter *c = JavaLangCharacter_valueOfWithChar_((jchar) [((JavaLangInteger *) nil_chk(((JavaLangInteger *) cast_chk(IOSObjectArray_Get(nil_chk(entity), 1), [JavaLangInteger class])))) intValue]);
          [OrgJsoupNodesEntities_xhtmlByVal putWithId:c withId:((NSString *) cast_chk(IOSObjectArray_Get(entity, 0), [NSString class]))];
        }
      }
    }
    J2OBJC_SET_INITIALIZED(OrgJsoupNodesEntities)
  }
}

@end

void OrgJsoupNodesEntities_init(OrgJsoupNodesEntities *self) {
  NSObject_init(self);
}

OrgJsoupNodesEntities *new_OrgJsoupNodesEntities_init() {
  J2OBJC_NEW_IMPL(OrgJsoupNodesEntities, init)
}

OrgJsoupNodesEntities *create_OrgJsoupNodesEntities_init() {
  J2OBJC_CREATE_IMPL(OrgJsoupNodesEntities, init)
}

jboolean OrgJsoupNodesEntities_isNamedEntityWithNSString_(NSString *name) {
  OrgJsoupNodesEntities_initialize();
  return [((id<JavaUtilMap>) nil_chk(OrgJsoupNodesEntities_full)) containsKeyWithId:name];
}

jboolean OrgJsoupNodesEntities_isBaseNamedEntityWithNSString_(NSString *name) {
  OrgJsoupNodesEntities_initialize();
  return [((id<JavaUtilMap>) nil_chk(OrgJsoupNodesEntities_base)) containsKeyWithId:name];
}

JavaLangCharacter *OrgJsoupNodesEntities_getCharacterByNameWithNSString_(NSString *name) {
  OrgJsoupNodesEntities_initialize();
  return [((id<JavaUtilMap>) nil_chk(OrgJsoupNodesEntities_full)) getWithId:name];
}

NSString *OrgJsoupNodesEntities_escapeWithNSString_withOrgJsoupNodesDocument_OutputSettings_(NSString *string, OrgJsoupNodesDocument_OutputSettings *outArg) {
  OrgJsoupNodesEntities_initialize();
  JavaLangStringBuilder *accum = create_JavaLangStringBuilder_initWithInt_([((NSString *) nil_chk(string)) java_length] * 2);
  OrgJsoupNodesEntities_escapeWithJavaLangStringBuilder_withNSString_withOrgJsoupNodesDocument_OutputSettings_withBoolean_withBoolean_withBoolean_(accum, string, outArg, false, false, false);
  return [accum description];
}

void OrgJsoupNodesEntities_escapeWithJavaLangStringBuilder_withNSString_withOrgJsoupNodesDocument_OutputSettings_withBoolean_withBoolean_withBoolean_(JavaLangStringBuilder *accum, NSString *string, OrgJsoupNodesDocument_OutputSettings *outArg, jboolean inAttribute, jboolean normaliseWhite, jboolean stripLeadingWhite) {
  OrgJsoupNodesEntities_initialize();
  jboolean lastWasWhite = false;
  jboolean reachedNonWhite = false;
  OrgJsoupNodesEntities_EscapeMode *escapeMode = [((OrgJsoupNodesDocument_OutputSettings *) nil_chk(outArg)) escapeMode];
  JavaNioCharsetCharsetEncoder *encoder = [outArg encoder];
  OrgJsoupNodesEntities_CoreCharset *coreCharset = OrgJsoupNodesEntities_CoreCharset_byNameWithNSString_([((JavaNioCharsetCharset *) nil_chk([((JavaNioCharsetCharsetEncoder *) nil_chk(encoder)) charset])) name]);
  id<JavaUtilMap> map = [((OrgJsoupNodesEntities_EscapeMode *) nil_chk(escapeMode)) getMap];
  jint length = [((NSString *) nil_chk(string)) java_length];
  jint codePoint;
  for (jint offset = 0; offset < length; offset += JavaLangCharacter_charCountWithInt_(codePoint)) {
    codePoint = [string java_codePointAt:offset];
    if (normaliseWhite) {
      if (OrgJsoupHelperStringUtil_isWhitespaceWithInt_(codePoint)) {
        if ((stripLeadingWhite && !reachedNonWhite) || lastWasWhite) continue;
        [((JavaLangStringBuilder *) nil_chk(accum)) appendWithChar:' '];
        lastWasWhite = true;
        continue;
      }
      else {
        lastWasWhite = false;
        reachedNonWhite = true;
      }
    }
    if (codePoint < JavaLangCharacter_MIN_SUPPLEMENTARY_CODE_POINT) {
      jchar c = (jchar) codePoint;
      switch (c) {
        case '&':
        [((JavaLangStringBuilder *) nil_chk(accum)) appendWithNSString:@"&amp;"];
        break;
        case (jint) 0xA0:
        if (escapeMode != JreLoadEnum(OrgJsoupNodesEntities_EscapeMode, xhtml)) [((JavaLangStringBuilder *) nil_chk(accum)) appendWithNSString:@"&nbsp;"];
        else [((JavaLangStringBuilder *) nil_chk(accum)) appendWithNSString:@"&#xa0;"];
        break;
        case '<':
        if (!inAttribute || escapeMode == JreLoadEnum(OrgJsoupNodesEntities_EscapeMode, xhtml)) [((JavaLangStringBuilder *) nil_chk(accum)) appendWithNSString:@"&lt;"];
        else [((JavaLangStringBuilder *) nil_chk(accum)) appendWithChar:c];
        break;
        case '>':
        if (!inAttribute) [((JavaLangStringBuilder *) nil_chk(accum)) appendWithNSString:@"&gt;"];
        else [((JavaLangStringBuilder *) nil_chk(accum)) appendWithChar:c];
        break;
        case '"':
        if (inAttribute) [((JavaLangStringBuilder *) nil_chk(accum)) appendWithNSString:@"&quot;"];
        else [((JavaLangStringBuilder *) nil_chk(accum)) appendWithChar:c];
        break;
        default:
        if (OrgJsoupNodesEntities_canEncodeWithOrgJsoupNodesEntities_CoreCharset_withChar_withJavaNioCharsetCharsetEncoder_(coreCharset, c, encoder)) [((JavaLangStringBuilder *) nil_chk(accum)) appendWithChar:c];
        else if ([((id<JavaUtilMap>) nil_chk(map)) containsKeyWithId:JavaLangCharacter_valueOfWithChar_(c)]) [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(accum)) appendWithChar:'&'])) appendWithNSString:[map getWithId:JavaLangCharacter_valueOfWithChar_(c)]])) appendWithChar:';'];
        else [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(accum)) appendWithNSString:@"&#x"])) appendWithNSString:JavaLangInteger_toHexStringWithInt_(codePoint)])) appendWithChar:';'];
      }
    }
    else {
      NSString *c = [NSString java_stringWithCharacters:JavaLangCharacter_toCharsWithInt_(codePoint)];
      if ([encoder canEncodeWithJavaLangCharSequence:c]) [((JavaLangStringBuilder *) nil_chk(accum)) appendWithNSString:c];
      else [((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk([((JavaLangStringBuilder *) nil_chk(accum)) appendWithNSString:@"&#x"])) appendWithNSString:JavaLangInteger_toHexStringWithInt_(codePoint)])) appendWithChar:';'];
    }
  }
}

NSString *OrgJsoupNodesEntities_unescapeWithNSString_(NSString *string) {
  OrgJsoupNodesEntities_initialize();
  return OrgJsoupNodesEntities_unescapeWithNSString_withBoolean_(string, false);
}

NSString *OrgJsoupNodesEntities_unescapeWithNSString_withBoolean_(NSString *string, jboolean strict) {
  OrgJsoupNodesEntities_initialize();
  return OrgJsoupParserParser_unescapeEntitiesWithNSString_withBoolean_(string, strict);
}

jboolean OrgJsoupNodesEntities_canEncodeWithOrgJsoupNodesEntities_CoreCharset_withChar_withJavaNioCharsetCharsetEncoder_(OrgJsoupNodesEntities_CoreCharset *charset, jchar c, JavaNioCharsetCharsetEncoder *fallback) {
  OrgJsoupNodesEntities_initialize();
  switch ([charset ordinal]) {
    case OrgJsoupNodesEntities_CoreCharset_Enum_ascii:
    return c < (jint) 0x80;
    case OrgJsoupNodesEntities_CoreCharset_Enum_utf:
    return true;
    default:
    return [((JavaNioCharsetCharsetEncoder *) nil_chk(fallback)) canEncodeWithChar:c];
  }
}

id<JavaUtilMap> OrgJsoupNodesEntities_loadEntitiesWithNSString_(NSString *filename) {
  OrgJsoupNodesEntities_initialize();
  JavaUtilProperties *properties = create_JavaUtilProperties_init();
  id<JavaUtilMap> entities = create_JavaUtilHashMap_init();
  @try {
    JavaIoInputStream *in = [OrgJsoupNodesEntities_class_() getResourceAsStream:filename];
    [properties load__WithJavaIoInputStream:in];
    [((JavaIoInputStream *) nil_chk(in)) close];
  }
  @catch (JavaIoIOException *e) {
    @throw create_JavaUtilMissingResourceException_initWithNSString_withNSString_withNSString_(JreStrcat("$$", @"Error loading entities resource: ", [e getMessage]), @"Entities", filename);
  }
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([properties entrySet])) {
    JavaLangCharacter *val = JavaLangCharacter_valueOfWithChar_((jchar) JavaLangInteger_parseIntWithNSString_withInt_((NSString *) cast_chk([((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue], [NSString class]), 16));
    NSString *name = (NSString *) cast_chk([entry_ getKey], [NSString class]);
    [entities putWithId:name withId:val];
  }
  return entities;
}

id<JavaUtilMap> OrgJsoupNodesEntities_toCharacterKeyWithJavaUtilMap_(id<JavaUtilMap> inMap) {
  OrgJsoupNodesEntities_initialize();
  id<JavaUtilMap> outMap = create_JavaUtilHashMap_init();
  for (id<JavaUtilMap_Entry> __strong entry_ in nil_chk([((id<JavaUtilMap>) nil_chk(inMap)) entrySet])) {
    JavaLangCharacter *character = [((id<JavaUtilMap_Entry>) nil_chk(entry_)) getValue];
    NSString *name = [entry_ getKey];
    if ([outMap containsKeyWithId:character]) {
      if ([((NSString *) nil_chk([((NSString *) nil_chk(name)) lowercaseString])) isEqual:name]) [outMap putWithId:character withId:name];
    }
    else {
      [outMap putWithId:character withId:name];
    }
  }
  return outMap;
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupNodesEntities)

J2OBJC_INITIALIZED_DEFN(OrgJsoupNodesEntities_EscapeMode)

OrgJsoupNodesEntities_EscapeMode *OrgJsoupNodesEntities_EscapeMode_values_[3];

@implementation OrgJsoupNodesEntities_EscapeMode

- (id<JavaUtilMap>)getMap {
  return map_;
}

+ (IOSObjectArray *)values {
  return OrgJsoupNodesEntities_EscapeMode_values();
}

+ (OrgJsoupNodesEntities_EscapeMode *)valueOfWithNSString:(NSString *)name {
  return OrgJsoupNodesEntities_EscapeMode_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LJavaUtilMap;", 0x1, -1, -1, -1, 0, -1, -1 },
    { NULL, "[LOrgJsoupNodesEntities_EscapeMode;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesEntities_EscapeMode;", 0x9, 1, 2, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(getMap);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "xhtml", "LOrgJsoupNodesEntities_EscapeMode;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "base", "LOrgJsoupNodesEntities_EscapeMode;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "extended", "LOrgJsoupNodesEntities_EscapeMode;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
    { "map_", "LJavaUtilMap;", .constantValue.asLong = 0, 0x2, -1, -1, 6, -1 },
  };
  static const void *ptrTable[] = { "()Ljava/util/Map<Ljava/lang/Character;Ljava/lang/String;>;", "valueOf", "LNSString;", &JreEnum(OrgJsoupNodesEntities_EscapeMode, xhtml), &JreEnum(OrgJsoupNodesEntities_EscapeMode, base), &JreEnum(OrgJsoupNodesEntities_EscapeMode, extended), "Ljava/util/Map<Ljava/lang/Character;Ljava/lang/String;>;", "LOrgJsoupNodesEntities;", "Ljava/lang/Enum<Lorg/jsoup/nodes/Entities$EscapeMode;>;" };
  static const J2ObjcClassInfo _OrgJsoupNodesEntities_EscapeMode = { "EscapeMode", "org.jsoup.nodes", ptrTable, methods, fields, 7, 0x4019, 3, 4, 7, -1, -1, 8, -1 };
  return &_OrgJsoupNodesEntities_EscapeMode;
}

+ (void)initialize {
  if (self == [OrgJsoupNodesEntities_EscapeMode class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    (JreEnum(OrgJsoupNodesEntities_EscapeMode, xhtml) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    OrgJsoupNodesEntities_EscapeMode_initWithJavaUtilMap_withNSString_withInt_(e, JreLoadStatic(OrgJsoupNodesEntities, xhtmlByVal), @"xhtml", 0);
    (JreEnum(OrgJsoupNodesEntities_EscapeMode, base) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    OrgJsoupNodesEntities_EscapeMode_initWithJavaUtilMap_withNSString_withInt_(e, JreLoadStatic(OrgJsoupNodesEntities, baseByVal), @"base", 1);
    (JreEnum(OrgJsoupNodesEntities_EscapeMode, extended) = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
    OrgJsoupNodesEntities_EscapeMode_initWithJavaUtilMap_withNSString_withInt_(e, JreLoadStatic(OrgJsoupNodesEntities, fullByVal), @"extended", 2);
    J2OBJC_SET_INITIALIZED(OrgJsoupNodesEntities_EscapeMode)
  }
}

@end

void OrgJsoupNodesEntities_EscapeMode_initWithJavaUtilMap_withNSString_withInt_(OrgJsoupNodesEntities_EscapeMode *self, id<JavaUtilMap> map, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
  JreStrongAssign(&self->map_, map);
}

IOSObjectArray *OrgJsoupNodesEntities_EscapeMode_values() {
  OrgJsoupNodesEntities_EscapeMode_initialize();
  return [IOSObjectArray arrayWithObjects:OrgJsoupNodesEntities_EscapeMode_values_ count:3 type:OrgJsoupNodesEntities_EscapeMode_class_()];
}

OrgJsoupNodesEntities_EscapeMode *OrgJsoupNodesEntities_EscapeMode_valueOfWithNSString_(NSString *name) {
  OrgJsoupNodesEntities_EscapeMode_initialize();
  for (int i = 0; i < 3; i++) {
    OrgJsoupNodesEntities_EscapeMode *e = OrgJsoupNodesEntities_EscapeMode_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgJsoupNodesEntities_EscapeMode *OrgJsoupNodesEntities_EscapeMode_fromOrdinal(NSUInteger ordinal) {
  OrgJsoupNodesEntities_EscapeMode_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return OrgJsoupNodesEntities_EscapeMode_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupNodesEntities_EscapeMode)

J2OBJC_INITIALIZED_DEFN(OrgJsoupNodesEntities_CoreCharset)

OrgJsoupNodesEntities_CoreCharset *OrgJsoupNodesEntities_CoreCharset_values_[3];

@implementation OrgJsoupNodesEntities_CoreCharset

+ (OrgJsoupNodesEntities_CoreCharset *)byNameWithNSString:(NSString *)name {
  return OrgJsoupNodesEntities_CoreCharset_byNameWithNSString_(name);
}

+ (IOSObjectArray *)values {
  return OrgJsoupNodesEntities_CoreCharset_values();
}

+ (OrgJsoupNodesEntities_CoreCharset *)valueOfWithNSString:(NSString *)name {
  return OrgJsoupNodesEntities_CoreCharset_valueOfWithNSString_(name);
}

+ (const J2ObjcClassInfo *)__metadata {
  static J2ObjcMethodInfo methods[] = {
    { NULL, "LOrgJsoupNodesEntities_CoreCharset;", 0xa, 0, 1, -1, -1, -1, -1 },
    { NULL, "[LOrgJsoupNodesEntities_CoreCharset;", 0x9, -1, -1, -1, -1, -1, -1 },
    { NULL, "LOrgJsoupNodesEntities_CoreCharset;", 0x9, 2, 1, -1, -1, -1, -1 },
  };
  #pragma clang diagnostic push
  #pragma clang diagnostic ignored "-Wobjc-multiple-method-names"
  methods[0].selector = @selector(byNameWithNSString:);
  methods[1].selector = @selector(values);
  methods[2].selector = @selector(valueOfWithNSString:);
  #pragma clang diagnostic pop
  static const J2ObjcFieldInfo fields[] = {
    { "ascii", "LOrgJsoupNodesEntities_CoreCharset;", .constantValue.asLong = 0, 0x4019, -1, 3, -1, -1 },
    { "utf", "LOrgJsoupNodesEntities_CoreCharset;", .constantValue.asLong = 0, 0x4019, -1, 4, -1, -1 },
    { "fallback", "LOrgJsoupNodesEntities_CoreCharset;", .constantValue.asLong = 0, 0x4019, -1, 5, -1, -1 },
  };
  static const void *ptrTable[] = { "byName", "LNSString;", "valueOf", &JreEnum(OrgJsoupNodesEntities_CoreCharset, ascii), &JreEnum(OrgJsoupNodesEntities_CoreCharset, utf), &JreEnum(OrgJsoupNodesEntities_CoreCharset, fallback), "LOrgJsoupNodesEntities;", "Ljava/lang/Enum<Lorg/jsoup/nodes/Entities$CoreCharset;>;" };
  static const J2ObjcClassInfo _OrgJsoupNodesEntities_CoreCharset = { "CoreCharset", "org.jsoup.nodes", ptrTable, methods, fields, 7, 0x401a, 3, 3, 6, -1, -1, 7, -1 };
  return &_OrgJsoupNodesEntities_CoreCharset;
}

+ (void)initialize {
  if (self == [OrgJsoupNodesEntities_CoreCharset class]) {
    size_t objSize = class_getInstanceSize(self);
    size_t allocSize = 3 * objSize;
    uintptr_t ptr = (uintptr_t)calloc(allocSize, 1);
    id e;
    for (jint i = 0; i < 3; i++) {
      (OrgJsoupNodesEntities_CoreCharset_values_[i] = e = objc_constructInstance(self, (void *)ptr), ptr += objSize);
      OrgJsoupNodesEntities_CoreCharset_initWithNSString_withInt_(e, JreEnumConstantName(OrgJsoupNodesEntities_CoreCharset_class_(), i), i);
    }
    J2OBJC_SET_INITIALIZED(OrgJsoupNodesEntities_CoreCharset)
  }
}

@end

void OrgJsoupNodesEntities_CoreCharset_initWithNSString_withInt_(OrgJsoupNodesEntities_CoreCharset *self, NSString *__name, jint __ordinal) {
  JavaLangEnum_initWithNSString_withInt_(self, __name, __ordinal);
}

OrgJsoupNodesEntities_CoreCharset *OrgJsoupNodesEntities_CoreCharset_byNameWithNSString_(NSString *name) {
  OrgJsoupNodesEntities_CoreCharset_initialize();
  if ([((NSString *) nil_chk(name)) isEqual:@"US-ASCII"]) return JreEnum(OrgJsoupNodesEntities_CoreCharset, ascii);
  if ([name java_hasPrefix:@"UTF-"]) return JreEnum(OrgJsoupNodesEntities_CoreCharset, utf);
  return JreEnum(OrgJsoupNodesEntities_CoreCharset, fallback);
}

IOSObjectArray *OrgJsoupNodesEntities_CoreCharset_values() {
  OrgJsoupNodesEntities_CoreCharset_initialize();
  return [IOSObjectArray arrayWithObjects:OrgJsoupNodesEntities_CoreCharset_values_ count:3 type:OrgJsoupNodesEntities_CoreCharset_class_()];
}

OrgJsoupNodesEntities_CoreCharset *OrgJsoupNodesEntities_CoreCharset_valueOfWithNSString_(NSString *name) {
  OrgJsoupNodesEntities_CoreCharset_initialize();
  for (int i = 0; i < 3; i++) {
    OrgJsoupNodesEntities_CoreCharset *e = OrgJsoupNodesEntities_CoreCharset_values_[i];
    if ([name isEqual:[e name]]) {
      return e;
    }
  }
  @throw create_JavaLangIllegalArgumentException_initWithNSString_(name);
  return nil;
}

OrgJsoupNodesEntities_CoreCharset *OrgJsoupNodesEntities_CoreCharset_fromOrdinal(NSUInteger ordinal) {
  OrgJsoupNodesEntities_CoreCharset_initialize();
  if (ordinal >= 3) {
    return nil;
  }
  return OrgJsoupNodesEntities_CoreCharset_values_[ordinal];
}

J2OBJC_CLASS_TYPE_LITERAL_SOURCE(OrgJsoupNodesEntities_CoreCharset)
