//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jsoup/src/main/java/org/jsoup/Connection.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJsoupConnection")
#ifdef RESTRICT_OrgJsoupConnection
#define INCLUDE_ALL_OrgJsoupConnection 0
#else
#define INCLUDE_ALL_OrgJsoupConnection 1
#endif
#undef RESTRICT_OrgJsoupConnection
#ifdef INCLUDE_OrgJsoupConnection_Response
#define INCLUDE_OrgJsoupConnection_Base 1
#endif
#ifdef INCLUDE_OrgJsoupConnection_Request
#define INCLUDE_OrgJsoupConnection_Base 1
#endif

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJsoupConnection_) && (INCLUDE_ALL_OrgJsoupConnection || defined(INCLUDE_OrgJsoupConnection))
#define OrgJsoupConnection_

@class IOSObjectArray;
@class JavaIoInputStream;
@class JavaNetURL;
@class OrgJsoupConnection_Method;
@class OrgJsoupNodesDocument;
@class OrgJsoupParserParser;
@protocol JavaUtilCollection;
@protocol JavaUtilMap;
@protocol OrgJsoupConnection_Request;
@protocol OrgJsoupConnection_Response;

/*!
 @brief A Connection provides a convenient interface to fetch content from the web, and parse them into Documents.
 <p>
  To get a new Connection, use <code>org.jsoup.Jsoup</code>. Connections contain <code>Connection.Request</code>
  and <code>Connection.Response</code> objects. The request objects are reusable as prototype requests. 
 </p>
  <p>
  Request configuration can be made using either the shortcut methods in Connection (e.g. <code>userAgent(String)</code>),
  or by methods in the Connection.Request object directly. All request configuration must be made before the request is
  executed. 
 </p>
 */
@protocol OrgJsoupConnection < JavaObject >

/*!
 @brief Set the request URL to fetch.The protocol must be HTTP or HTTPS.
 @param url URL to connect to
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)urlWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Set the request URL to fetch.The protocol must be HTTP or HTTPS.
 @param url URL to connect to
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)urlWithNSString:(NSString *)url;

/*!
 @brief Set the request user-agent header.
 @param userAgent user-agent to use
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)userAgentWithNSString:(NSString *)userAgent;

/*!
 @brief Set the request timeouts (connect and read).If a timeout occurs, an IOException will be thrown.
 The default
  timeout is 3 seconds (3000 millis). A timeout of zero is treated as an infinite timeout.
 @param millis number of milliseconds (thousandths of a second) before timing out connects or reads.
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)timeoutWithInt:(jint)millis;

/*!
 @brief Set the maximum bytes to read from the (uncompressed) connection into the body, before the connection is closed,
  and the input truncated.The default maximum is 1MB.
 A max size of zero is treated as an infinite amount (bounded
  only by your patience and the memory available on your machine).
 @param bytes number of bytes to read from the input before truncating
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)maxBodySizeWithInt:(jint)bytes;

/*!
 @brief Set the request referrer (aka "referer") header.
 @param referrer referrer to use
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)referrerWithNSString:(NSString *)referrer;

/*!
 @brief Configures the connection to (not) follow server redirects.By default this is <b>true</b>.
 @param followRedirects true if server redirects should be followed.
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)followRedirectsWithBoolean:(jboolean)followRedirects;

/*!
 @brief Set the request method to use, GET or POST.Default is GET.
 @param method HTTP request method
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)methodWithOrgJsoupConnection_Method:(OrgJsoupConnection_Method *)method;

/*!
 @brief Configures the connection to not throw exceptions when a HTTP error occurs.(4xx - 5xx, e.g. 404 or 500).
 By
  default this is <b>false</b>; an IOException is thrown if an error is encountered. If set to <b>true</b>, the
  response is populated with the error body, and the status message will reflect the error.
 @param ignoreHttpErrors - false (default) if HTTP errors should be ignored.
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)ignoreHttpErrorsWithBoolean:(jboolean)ignoreHttpErrors;

/*!
 @brief Ignore the document's Content-Type when parsing the response.By default this is <b>false</b>, an unrecognised
  content-type will cause an IOException to be thrown.
 (This is to prevent producing garbage by attempting to parse
  a JPEG binary image, for example.) Set to true to force a parse attempt regardless of content type.
 @param ignoreContentType set to true if you would like the content type ignored on parsing the response into a  Document.
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)ignoreContentTypeWithBoolean:(jboolean)ignoreContentType;

/*!
 @brief Disable/enable TSL certificates validation for HTTPS requests.
 <p>
  By default this is <b>true</b>; all
  connections over HTTPS perform normal validation of certificates, and will abort requests if the provided
  certificate does not validate. 
 </p>
  <p>
  Some servers use expired, self-generated certificates; or your JDK may not
  support SNI hosts. In which case, you may want to enable this setting. 
 </p>
  <p>
  <b>Be careful</b> and understand why you need to disable these validations. 
 </p>
 @param value if should validate TSL (SSL) certificates.  <b> true </b>  by default.
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)validateTLSCertificatesWithBoolean:(jboolean)value;

/*!
 @brief Add a request data parameter.Request parameters are sent in the request query string for GETs, and in the
  request body for POSTs.
 A request may have multiple values of the same name.
 @param key data key
 @param value data value
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)dataWithNSString:(NSString *)key
                              withNSString:(NSString *)value;

/*!
 @brief Add an input stream as a request data paramater.For GETs, has no effect, but for POSTS this will upload the
  input stream.
 @param key data key (form item name)
 @param filename the name of the file to present to the remove server. Typically just the name, not path,  component.
 @param inputStream the input stream to upload, that you probably obtained from a <code>java.io.FileInputStream</code> .
   You must close the InputStream in a <code>finally</code>  block.
 @return this Connections, for chaining
 */
- (id<OrgJsoupConnection>)dataWithNSString:(NSString *)key
                              withNSString:(NSString *)filename
                     withJavaIoInputStream:(JavaIoInputStream *)inputStream;

/*!
 @brief Adds all of the supplied data to the request data parameters
 @param data collection of data parameters
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)dataWithJavaUtilCollection:(id<JavaUtilCollection>)data;

/*!
 @brief Adds all of the supplied data to the request data parameters
 @param data map of data parameters
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)dataWithJavaUtilMap:(id<JavaUtilMap>)data;

/*!
 @brief Add a number of request data parameters.Multiple parameters may be set at once, e.g.: <code>.data("name",
  "jsoup", "language", "Java", "language", "English");</code> creates a query string like: 
 <code>?
 name=jsoup&amp;language=Java&amp;language=English</code>
 @param keyvals a set of key value pairs.
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)dataWithNSStringArray:(IOSObjectArray *)keyvals;

/*!
 @brief Set a request header.
 @param name header name
 @param value header value
 @return this Connection, for chaining
 - seealso: org.jsoup.Connection.Request
 */
- (id<OrgJsoupConnection>)headerWithNSString:(NSString *)name
                                withNSString:(NSString *)value;

/*!
 @brief Set a cookie to be sent in the request.
 @param name name of cookie
 @param value value of cookie
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)cookieWithNSString:(NSString *)name
                                withNSString:(NSString *)value;

/*!
 @brief Adds each of the supplied cookies to the request.
 @param cookies map of cookie name -&gt;  value pairs
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)cookiesWithJavaUtilMap:(id<JavaUtilMap>)cookies;

/*!
 @brief Provide an alternate parser to use when parsing the response to a Document.If not set, defaults to the HTML
  parser, unless the response content-type is XML, in which case the XML parser is used.
 @param parser alternate parser
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)parserWithOrgJsoupParserParser:(OrgJsoupParserParser *)parser;

/*!
 @brief Sets the default post data character set for x-www-form-urlencoded post data
 @param charset character set to encode post data
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)postDataCharsetWithNSString:(NSString *)charset;

/*!
 @brief Execute the request as a GET, and parse the result.
 @return parsed Document
 @throw java.net.MalformedURLExceptionif the request URL is not a HTTP or HTTPS URL, or is otherwise malformed
 @throw HttpStatusExceptionif the response is not OK and HTTP response errors are not ignored
 @throw UnsupportedMimeTypeExceptionif the response mime type is not supported and those errors are not ignored
 @throw java.net.SocketTimeoutExceptionif the connection times out
 @throw IOExceptionon error
 */
- (OrgJsoupNodesDocument *)get;

/*!
 @brief Execute the request as a POST, and parse the result.
 @return parsed Document
 @throw java.net.MalformedURLExceptionif the request URL is not a HTTP or HTTPS URL, or is otherwise malformed
 @throw HttpStatusExceptionif the response is not OK and HTTP response errors are not ignored
 @throw UnsupportedMimeTypeExceptionif the response mime type is not supported and those errors are not ignored
 @throw java.net.SocketTimeoutExceptionif the connection times out
 @throw IOExceptionon error
 */
- (OrgJsoupNodesDocument *)post;

/*!
 @brief Execute the request.
 @return a response object
 @throw java.net.MalformedURLExceptionif the request URL is not a HTTP or HTTPS URL, or is otherwise malformed
 @throw HttpStatusExceptionif the response is not OK and HTTP response errors are not ignored
 @throw UnsupportedMimeTypeExceptionif the response mime type is not supported and those errors are not ignored
 @throw java.net.SocketTimeoutExceptionif the connection times out
 @throw IOExceptionon error
 */
- (id<OrgJsoupConnection_Response>)execute;

/*!
 @brief Get the request object associated with this connection
 @return request
 */
- (id<OrgJsoupConnection_Request>)request;

/*!
 @brief Set the connection's request
 @param request new request object
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)requestWithOrgJsoupConnection_Request:(id<OrgJsoupConnection_Request>)request;

/*!
 @brief Get the response, once the request has been executed
 @return response
 */
- (id<OrgJsoupConnection_Response>)response;

/*!
 @brief Set the connection's response
 @param response new response
 @return this Connection, for chaining
 */
- (id<OrgJsoupConnection>)responseWithOrgJsoupConnection_Response:(id<OrgJsoupConnection_Response>)response;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupConnection)

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupConnection)

#endif

#if !defined (OrgJsoupConnection_Method_) && (INCLUDE_ALL_OrgJsoupConnection || defined(INCLUDE_OrgJsoupConnection_Method))
#define OrgJsoupConnection_Method_

#define RESTRICT_JavaLangEnum 1
#define INCLUDE_JavaLangEnum 1
#include "java/lang/Enum.h"

@class IOSObjectArray;

typedef NS_ENUM(NSUInteger, OrgJsoupConnection_Method_Enum) {
  OrgJsoupConnection_Method_Enum_GET = 0,
  OrgJsoupConnection_Method_Enum_POST = 1,
  OrgJsoupConnection_Method_Enum_PUT = 2,
  OrgJsoupConnection_Method_Enum_DELETE = 3,
  OrgJsoupConnection_Method_Enum_PATCH = 4,
};

/*!
 @brief GET and POST http methods.
 */
@interface OrgJsoupConnection_Method : JavaLangEnum

#pragma mark Public

/*!
 @brief Check if this HTTP method has/needs a request body
 @return if body needed
 */
- (jboolean)hasBody;

+ (OrgJsoupConnection_Method *)valueOfWithNSString:(NSString *)name;

+ (IOSObjectArray *)values;

@end

J2OBJC_STATIC_INIT(OrgJsoupConnection_Method)

/*! INTERNAL ONLY - Use enum accessors declared below. */
FOUNDATION_EXPORT OrgJsoupConnection_Method *OrgJsoupConnection_Method_values_[];

inline OrgJsoupConnection_Method *OrgJsoupConnection_Method_get_GET(void);
J2OBJC_ENUM_CONSTANT(OrgJsoupConnection_Method, GET)

inline OrgJsoupConnection_Method *OrgJsoupConnection_Method_get_POST(void);
J2OBJC_ENUM_CONSTANT(OrgJsoupConnection_Method, POST)

inline OrgJsoupConnection_Method *OrgJsoupConnection_Method_get_PUT(void);
J2OBJC_ENUM_CONSTANT(OrgJsoupConnection_Method, PUT)

inline OrgJsoupConnection_Method *OrgJsoupConnection_Method_get_DELETE(void);
J2OBJC_ENUM_CONSTANT(OrgJsoupConnection_Method, DELETE)

inline OrgJsoupConnection_Method *OrgJsoupConnection_Method_get_PATCH(void);
J2OBJC_ENUM_CONSTANT(OrgJsoupConnection_Method, PATCH)

FOUNDATION_EXPORT IOSObjectArray *OrgJsoupConnection_Method_values(void);

FOUNDATION_EXPORT OrgJsoupConnection_Method *OrgJsoupConnection_Method_valueOfWithNSString_(NSString *name);

FOUNDATION_EXPORT OrgJsoupConnection_Method *OrgJsoupConnection_Method_fromOrdinal(NSUInteger ordinal);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupConnection_Method)

#endif

#if !defined (OrgJsoupConnection_Base_) && (INCLUDE_ALL_OrgJsoupConnection || defined(INCLUDE_OrgJsoupConnection_Base))
#define OrgJsoupConnection_Base_

@class JavaNetURL;
@class OrgJsoupConnection_Method;
@protocol JavaUtilMap;

/*!
 @brief Common methods for Requests and Responses
 */
@protocol OrgJsoupConnection_Base < JavaObject >

/*!
 @brief Get the URL
 @return URL
 */
- (JavaNetURL *)url;

/*!
 @brief Set the URL
 @param url new URL
 @return this, for chaining
 */
- (id<OrgJsoupConnection_Base>)urlWithJavaNetURL:(JavaNetURL *)url;

/*!
 @brief Get the request method
 @return method
 */
- (OrgJsoupConnection_Method *)method;

/*!
 @brief Set the request method
 @param method new method
 @return this, for chaining
 */
- (id<OrgJsoupConnection_Base>)methodWithOrgJsoupConnection_Method:(OrgJsoupConnection_Method *)method;

/*!
 @brief Get the value of a header.This is a simplified header model, where a header may only have one value.
 <p>
  Header names are case insensitive. 
 </p>
 @param name name of header (case insensitive)
 @return value of header, or null if not set.
 - seealso: #hasHeader(String)
 - seealso: #cookie(String)
 */
- (NSString *)headerWithNSString:(NSString *)name;

/*!
 @brief Set a header.This method will overwrite any existing header with the same case insensitive name.
 @param name Name of header
 @param value Value of header
 @return this, for chaining
 */
- (id<OrgJsoupConnection_Base>)headerWithNSString:(NSString *)name
                                     withNSString:(NSString *)value;

/*!
 @brief Check if a header is present
 @param name name of header (case insensitive)
 @return if the header is present in this request/response
 */
- (jboolean)hasHeaderWithNSString:(NSString *)name;

/*!
 @brief Check if a header is present, with the given value
 @param name header name (case insensitive)
 @param value value (case insensitive)
 @return if the header and value pair are set in this req/res
 */
- (jboolean)hasHeaderWithValueWithNSString:(NSString *)name
                              withNSString:(NSString *)value;

/*!
 @brief Remove a header by name
 @param name name of header to remove (case insensitive)
 @return this, for chaining
 */
- (id<OrgJsoupConnection_Base>)removeHeaderWithNSString:(NSString *)name;

/*!
 @brief Retrieve all of the request/response headers as a map
 @return headers
 */
- (id<JavaUtilMap>)headers;

/*!
 @brief Get a cookie value by name from this request/response.
 <p>
  Response objects have a simplified cookie model. Each cookie set in the response is added to the response
  object's cookie key=value map. The cookie's path, domain, and expiry date are ignored. 
 </p>
 @param name name of cookie to retrieve.
 @return value of cookie, or null if not set
 */
- (NSString *)cookieWithNSString:(NSString *)name;

/*!
 @brief Set a cookie in this request/response.
 @param name name of cookie
 @param value value of cookie
 @return this, for chaining
 */
- (id<OrgJsoupConnection_Base>)cookieWithNSString:(NSString *)name
                                     withNSString:(NSString *)value;

/*!
 @brief Check if a cookie is present
 @param name name of cookie
 @return if the cookie is present in this request/response
 */
- (jboolean)hasCookieWithNSString:(NSString *)name;

/*!
 @brief Remove a cookie by name
 @param name name of cookie to remove
 @return this, for chaining
 */
- (id<OrgJsoupConnection_Base>)removeCookieWithNSString:(NSString *)name;

/*!
 @brief Retrieve all of the request/response cookies as a map
 @return cookies
 */
- (id<JavaUtilMap>)cookies;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupConnection_Base)

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupConnection_Base)

#endif

#if !defined (OrgJsoupConnection_Request_) && (INCLUDE_ALL_OrgJsoupConnection || defined(INCLUDE_OrgJsoupConnection_Request))
#define OrgJsoupConnection_Request_

@class JavaNetURL;
@class OrgJsoupConnection_Method;
@class OrgJsoupParserParser;
@protocol JavaUtilCollection;
@protocol OrgJsoupConnection_KeyVal;

/*!
 @brief Represents a HTTP request.
 */
@protocol OrgJsoupConnection_Request < OrgJsoupConnection_Base, JavaObject >

/*!
 @brief Get the request timeout, in milliseconds.
 @return the timeout in milliseconds.
 */
- (jint)timeout;

/*!
 @brief Update the request timeout.
 @param millis timeout, in milliseconds
 @return this Request, for chaining
 */
- (id<OrgJsoupConnection_Request>)timeoutWithInt:(jint)millis;

/*!
 @brief Get the maximum body size, in bytes.
 @return the maximum body size, in bytes.
 */
- (jint)maxBodySize;

/*!
 @brief Update the maximum body size, in bytes.
 @param bytes maximum body size, in bytes.
 @return this Request, for chaining
 */
- (id<OrgJsoupConnection_Request>)maxBodySizeWithInt:(jint)bytes;

/*!
 @brief Get the current followRedirects configuration.
 @return true if followRedirects is enabled.
 */
- (jboolean)followRedirects;

/*!
 @brief Configures the request to (not) follow server redirects.By default this is <b>true</b>.
 @param followRedirects true if server redirects should be followed.
 @return this Request, for chaining
 */
- (id<OrgJsoupConnection_Request>)followRedirectsWithBoolean:(jboolean)followRedirects;

/*!
 @brief Get the current ignoreHttpErrors configuration.
 @return true if errors will be ignored; false (default) if HTTP errors will cause an IOException to be
  thrown.
 */
- (jboolean)ignoreHttpErrors;

/*!
 @brief Configures the request to ignore HTTP errors in the response.
 @param ignoreHttpErrors set to true to ignore HTTP errors.
 @return this Request, for chaining
 */
- (id<OrgJsoupConnection_Request>)ignoreHttpErrorsWithBoolean:(jboolean)ignoreHttpErrors;

/*!
 @brief Get the current ignoreContentType configuration.
 @return true if invalid content-types will be ignored; false (default) if they will cause an IOException to
  be thrown.
 */
- (jboolean)ignoreContentType;

/*!
 @brief Configures the request to ignore the Content-Type of the response.
 @param ignoreContentType set to true to ignore the content type.
 @return this Request, for chaining
 */
- (id<OrgJsoupConnection_Request>)ignoreContentTypeWithBoolean:(jboolean)ignoreContentType;

/*!
 @brief Get the current state of TLS (SSL) certificate validation.
 @return true if TLS cert validation enabled
 */
- (jboolean)validateTLSCertificates;

/*!
 @brief Set TLS certificate validation.
 @param value set false to ignore TLS (SSL) certificates
 */
- (void)validateTLSCertificatesWithBoolean:(jboolean)value;

/*!
 @brief Add a data parameter to the request
 @param keyval data to add.
 @return this Request, for chaining
 */
- (id<OrgJsoupConnection_Request>)dataWithOrgJsoupConnection_KeyVal:(id<OrgJsoupConnection_KeyVal>)keyval;

/*!
 @brief Get all of the request's data parameters
 @return collection of keyvals
 */
- (id<JavaUtilCollection>)data;

/*!
 @brief Specify the parser to use when parsing the document.
 @param parser parser to use.
 @return this Request, for chaining
 */
- (id<OrgJsoupConnection_Request>)parserWithOrgJsoupParserParser:(OrgJsoupParserParser *)parser;

/*!
 @brief Get the current parser to use when parsing the document.
 @return current Parser
 */
- (OrgJsoupParserParser *)parser;

/*!
 @brief Sets the post data character set for x-www-form-urlencoded post data
 @param charset character set to encode post data
 @return this Request, for chaining
 */
- (id<OrgJsoupConnection_Request>)postDataCharsetWithNSString:(NSString *)charset;

/*!
 @brief Gets the post data character set for x-www-form-urlencoded post data
 @return character set to encode post data
 */
- (NSString *)postDataCharset;

- (id<OrgJsoupConnection_Request>)urlWithJavaNetURL:(JavaNetURL *)arg0;

- (id<OrgJsoupConnection_Request>)methodWithOrgJsoupConnection_Method:(OrgJsoupConnection_Method *)arg0;

- (id<OrgJsoupConnection_Request>)headerWithNSString:(NSString *)arg0
                                        withNSString:(NSString *)arg1;

- (id<OrgJsoupConnection_Request>)removeCookieWithNSString:(NSString *)arg0;

- (id<OrgJsoupConnection_Request>)removeHeaderWithNSString:(NSString *)arg0;

- (id<OrgJsoupConnection_Request>)cookieWithNSString:(NSString *)arg0
                                        withNSString:(NSString *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupConnection_Request)

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupConnection_Request)

#endif

#if !defined (OrgJsoupConnection_Response_) && (INCLUDE_ALL_OrgJsoupConnection || defined(INCLUDE_OrgJsoupConnection_Response))
#define OrgJsoupConnection_Response_

@class IOSByteArray;
@class JavaNetURL;
@class OrgJsoupConnection_Method;
@class OrgJsoupNodesDocument;

/*!
 @brief Represents a HTTP response.
 */
@protocol OrgJsoupConnection_Response < OrgJsoupConnection_Base, JavaObject >

/*!
 @brief Get the status code of the response.
 @return status code
 */
- (jint)statusCode;

/*!
 @brief Get the status message of the response.
 @return status message
 */
- (NSString *)statusMessage;

/*!
 @brief Get the character set name of the response.
 @return character set name
 */
- (NSString *)charset;

/*!
 @brief Get the response content type (e.g."
 text/html");
 @return the response content type
 */
- (NSString *)contentType;

/*!
 @brief Parse the body of the response as a Document.
 @return a parsed Document
 @throw IOExceptionon error
 */
- (OrgJsoupNodesDocument *)parse;

/*!
 @brief Get the body of the response as a plain string.
 @return body
 */
- (NSString *)body;

/*!
 @brief Get the body of the response as an array of bytes.
 @return body bytes
 */
- (IOSByteArray *)bodyAsBytes;

- (id<OrgJsoupConnection_Response>)urlWithJavaNetURL:(JavaNetURL *)arg0;

- (id<OrgJsoupConnection_Response>)methodWithOrgJsoupConnection_Method:(OrgJsoupConnection_Method *)arg0;

- (id<OrgJsoupConnection_Response>)headerWithNSString:(NSString *)arg0
                                         withNSString:(NSString *)arg1;

- (id<OrgJsoupConnection_Response>)removeCookieWithNSString:(NSString *)arg0;

- (id<OrgJsoupConnection_Response>)removeHeaderWithNSString:(NSString *)arg0;

- (id<OrgJsoupConnection_Response>)cookieWithNSString:(NSString *)arg0
                                         withNSString:(NSString *)arg1;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupConnection_Response)

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupConnection_Response)

#endif

#if !defined (OrgJsoupConnection_KeyVal_) && (INCLUDE_ALL_OrgJsoupConnection || defined(INCLUDE_OrgJsoupConnection_KeyVal))
#define OrgJsoupConnection_KeyVal_

@class JavaIoInputStream;

/*!
 @brief A Key Value tuple.
 */
@protocol OrgJsoupConnection_KeyVal < JavaObject >

/*!
 @brief Update the key of a keyval
 @param key new key
 @return this KeyVal, for chaining
 */
- (id<OrgJsoupConnection_KeyVal>)keyWithNSString:(NSString *)key;

/*!
 @brief Get the key of a keyval
 @return the key
 */
- (NSString *)key;

/*!
 @brief Update the value of a keyval
 @param value the new value
 @return this KeyVal, for chaining
 */
- (id<OrgJsoupConnection_KeyVal>)valueWithNSString:(NSString *)value;

/*!
 @brief Get the value of a keyval
 @return the value
 */
- (NSString *)value;

/*!
 @brief Add or update an input stream to this keyVal
 @param inputStream new input stream
 @return this KeyVal, for chaining
 */
- (id<OrgJsoupConnection_KeyVal>)inputStreamWithJavaIoInputStream:(JavaIoInputStream *)inputStream;

/*!
 @brief Get the input stream associated with this keyval, if any
 @return input stream if set, or null
 */
- (JavaIoInputStream *)inputStream;

/*!
 @brief Does this keyval have an input stream?
 @return true if this keyval does indeed have an input stream
 */
- (jboolean)hasInputStream;

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupConnection_KeyVal)

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupConnection_KeyVal)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgJsoupConnection")
