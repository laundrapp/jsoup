//
//  Generated by the J2ObjC translator.  DO NOT EDIT!
//  source: /Users/marcussmith/temp/jsoup/src/main/java/org/jsoup/select/Elements.java
//

#include "J2ObjC_header.h"

#pragma push_macro("INCLUDE_ALL_OrgJsoupSelectElements")
#ifdef RESTRICT_OrgJsoupSelectElements
#define INCLUDE_ALL_OrgJsoupSelectElements 0
#else
#define INCLUDE_ALL_OrgJsoupSelectElements 1
#endif
#undef RESTRICT_OrgJsoupSelectElements

#if __has_feature(nullability)
#pragma clang diagnostic push
#pragma GCC diagnostic ignored "-Wnullability-completeness"
#endif

#if !defined (OrgJsoupSelectElements_) && (INCLUDE_ALL_OrgJsoupSelectElements || defined(INCLUDE_OrgJsoupSelectElements))
#define OrgJsoupSelectElements_

#define RESTRICT_JavaUtilArrayList 1
#define INCLUDE_JavaUtilArrayList 1
#include "java/util/ArrayList.h"

@class IOSObjectArray;
@class OrgJsoupNodesElement;
@protocol JavaUtilCollection;
@protocol JavaUtilList;
@protocol OrgJsoupSelectNodeVisitor;

/*!
 @brief A list of <code>Element</code>s, with methods that act on every element in the list.
 <p>
  To get an <code>Elements</code> object, use the <code>Element.select(String)</code> method. 
 </p>
 @author Jonathan Hedley, jonathan@@hedley.net
 */
@interface OrgJsoupSelectElements : JavaUtilArrayList

#pragma mark Public

- (instancetype __nonnull)init;

- (instancetype __nonnull)initWithJavaUtilCollection:(id<JavaUtilCollection>)elements;

- (instancetype __nonnull)initWithOrgJsoupNodesElementArray:(IOSObjectArray *)elements;

- (instancetype __nonnull)initWithInt:(jint)initialCapacity;

- (instancetype __nonnull)initWithJavaUtilList:(id<JavaUtilList>)elements;

/*!
 @brief Add the class name to every matched element's <code>class</code> attribute.
 @param className_ class name to add
 @return this
 */
- (OrgJsoupSelectElements *)addClassWithNSString:(NSString *)className_;

/*!
 @brief Insert the supplied HTML after each matched element's outer HTML.
 @param html HTML to insert after each element
 @return this, for chaining
 - seealso: Element#after(String)
 */
- (OrgJsoupSelectElements *)afterWithNSString:(NSString *)html;

/*!
 @brief Add the supplied HTML to the end of each matched element's inner HTML.
 @param html HTML to add inside each element, after the existing HTML
 @return this, for chaining
 - seealso: Element#append(String)
 */
- (OrgJsoupSelectElements *)appendWithNSString:(NSString *)html;

/*!
 @brief Get an attribute value from the first matched element that has the attribute.
 @param attributeKey The attribute key.
 @return The attribute value from the first matched element that has the attribute.. If no elements were matched (isEmpty() == true),
      or if the no elements have the attribute, returns empty string.
 - seealso: #hasAttr(String)
 */
- (NSString *)attrWithNSString:(NSString *)attributeKey;

/*!
 @brief Set an attribute on all matched elements.
 @param attributeKey attribute key
 @param attributeValue attribute value
 @return this
 */
- (OrgJsoupSelectElements *)attrWithNSString:(NSString *)attributeKey
                                withNSString:(NSString *)attributeValue;

/*!
 @brief Insert the supplied HTML before each matched element's outer HTML.
 @param html HTML to insert before each element
 @return this, for chaining
 - seealso: Element#before(String)
 */
- (OrgJsoupSelectElements *)beforeWithNSString:(NSString *)html;

/*!
 @brief Creates a deep copy of these elements.
 @return a deep copy
 */
- (OrgJsoupSelectElements *)java_clone;

/*!
 @brief Empty (remove all child nodes from) each matched element.This is similar to setting the inner HTML of each
  element to nothing.
 <p>
  E.g. HTML: <code><div><p>Hello <b>there</b></p> <p>now</p></div></code><br>
  <code>doc.select("p").empty();</code><br>
  HTML = <code><div><p></p> <p></p></div></code>
 @return this, for chaining
 - seealso: Element#empty()
 - seealso: #remove()
 */
- (OrgJsoupSelectElements *)empty;

/*!
 @brief Get the <i>nth</i> matched element as an Elements object.
 <p>
  See also <code>get(int)</code> to retrieve an Element.
 @param index the (zero-based) index of the element in the list to retain
 @return Elements containing only the specified element, or, if that element did not exist, an empty list.
 */
- (OrgJsoupSelectElements *)eqWithInt:(jint)index;

/*!
 @brief Get the first matched element.
 @return The first matched element, or <code>null</code> if contents is empty.
 */
- (OrgJsoupNodesElement *)first;

/*!
 @brief Get the <code>FormElement</code> forms from the selected elements, if any.
 @return a list of <code>FormElement</code>s pulled from the matched elements. The list will be empty if the elements contain
  no forms.
 */
- (id<JavaUtilList>)forms;

- (OrgJsoupNodesElement *)getWithInt:(jint)arg0;

/*!
 @brief Checks if any of the matched elements have this attribute set.
 @param attributeKey attribute key
 @return true if any of the elements have the attribute; false if none do.
 */
- (jboolean)hasAttrWithNSString:(NSString *)attributeKey;

/*!
 @brief Determine if any of the matched elements have this class name set in their <code>class</code> attribute.
 @param className_ class name to check for
 @return true if any do, false if none do
 */
- (jboolean)hasClassWithNSString:(NSString *)className_;

- (jboolean)hasText;

/*!
 @brief Get the combined inner HTML of all matched elements.
 @return string of all element's inner HTML.
 - seealso: #text()
 - seealso: #outerHtml()
 */
- (NSString *)html;

/*!
 @brief Set the inner HTML of each matched element.
 @param html HTML to parse and set into each matched element.
 @return this, for chaining
 - seealso: Element#html(String)
 */
- (OrgJsoupSelectElements *)htmlWithNSString:(NSString *)html;

/*!
 @brief Test if any of the matched elements match the supplied query.
 @param query A selector
 @return true if at least one element in the list matches the query.
 */
- (jboolean)isWithNSString:(NSString *)query;

/*!
 @brief Get the last matched element.
 @return The last matched element, or <code>null</code> if contents is empty.
 */
- (OrgJsoupNodesElement *)last;

/*!
 @brief Remove elements from this list that match the <code>Selector</code> query.
 <p>
  E.g. HTML: <code><div class=logo>One</div> <div>Two</div></code><br>
  <code>Elements divs = doc.select("div").not("#logo");</code><br>
  Result: <code>divs: [<div>Two</div>]</code>
  <p>
 @param query the selector query whose results should be removed from these elements
 @return a new elements list that contains only the filtered results
 */
- (OrgJsoupSelectElements *)not__WithNSString:(NSString *)query;

/*!
 @brief Get the combined outer HTML of all matched elements.
 @return string of all element's outer HTML.
 - seealso: #text()
 - seealso: #html()
 */
- (NSString *)outerHtml;

/*!
 @brief Get all of the parents and ancestor elements of the matched elements.
 @return all of the parents and ancestor elements of the matched elements
 */
- (OrgJsoupSelectElements *)parents;

/*!
 @brief Add the supplied HTML to the start of each matched element's inner HTML.
 @param html HTML to add inside each element, before the existing HTML
 @return this, for chaining
 - seealso: Element#prepend(String)
 */
- (OrgJsoupSelectElements *)prependWithNSString:(NSString *)html;

/*!
 @brief Remove each matched element from the DOM.This is similar to setting the outer HTML of each element to nothing.
 <p>
  E.g. HTML: <code><div><p>Hello</p> <p>there</p> <img /></div></code><br>
  <code>doc.select("p").remove();</code><br>
  HTML = <code><div> <img /></div></code>
  <p>
  Note that this method should not be used to clean user-submitted HTML; rather, use <code>org.jsoup.safety.Cleaner</code> to clean HTML.
 @return this, for chaining
 - seealso: Element#empty()
 - seealso: #empty()
 */
- (OrgJsoupSelectElements *)remove;

/*!
 @brief Remove an attribute from every matched element.
 @param attributeKey The attribute to remove.
 @return this (for chaining)
 */
- (OrgJsoupSelectElements *)removeAttrWithNSString:(NSString *)attributeKey;

/*!
 @brief Remove the class name from every matched element's <code>class</code> attribute, if present.
 @param className_ class name to remove
 @return this
 */
- (OrgJsoupSelectElements *)removeClassWithNSString:(NSString *)className_;

- (OrgJsoupNodesElement *)removeWithInt:(jint)arg0;

/*!
 @brief Find matching elements within this element list.
 @param query A <code>Selector</code>  query
 @return the filtered list of elements, or an empty list if none match.
 */
- (OrgJsoupSelectElements *)selectWithNSString:(NSString *)query;

- (OrgJsoupNodesElement *)setWithInt:(jint)arg0
                              withId:(OrgJsoupNodesElement *)arg1;

/*!
 @brief Update the tag name of each matched element.For example, to change each <code><i></code> to a <code><em></code>, do 
 <code>doc.select("i").tagName("em");</code>
 @param tagName the new tag name
 @return this, for chaining
 - seealso: Element#tagName(String)
 */
- (OrgJsoupSelectElements *)tagNameWithNSString:(NSString *)tagName;

/*!
 @brief Get the combined text of all the matched elements.
 <p>
  Note that it is possible to get repeats if the matched elements contain both parent elements and their own
  children, as the Element.text() method returns the combined text of a parent and all its children.
 @return string of all text: unescaped and no HTML.
 - seealso: Element#text()
 */
- (NSString *)text;

/*!
 @brief Toggle the class name on every matched element's <code>class</code> attribute.
 @param className_ class name to add if missing, or remove if present, from every element.
 @return this
 */
- (OrgJsoupSelectElements *)toggleClassWithNSString:(NSString *)className_;

/*!
 @brief Get the combined outer HTML of all matched elements.Alias of <code>outerHtml()</code>.
 @return string of all element's outer HTML.
 - seealso: #text()
 - seealso: #html()
 */
- (NSString *)description;

/*!
 @brief Perform a depth-first traversal on each of the selected elements.
 @param nodeVisitor the visitor callbacks to perform on each node
 @return this, for chaining
 */
- (OrgJsoupSelectElements *)traverseWithOrgJsoupSelectNodeVisitor:(id<OrgJsoupSelectNodeVisitor>)nodeVisitor;

/*!
 @brief Removes the matched elements from the DOM, and moves their children up into their parents.This has the effect of
  dropping the elements but keeping their children.
 <p>
  This is useful for e.g removing unwanted formatting elements but keeping their contents. 
 </p>
  
  E.g. with HTML: <p><code><div><font>One</font> <font><a href="/">Two</a></font></div></code></p>
  <p><code>doc.select("font").unwrap();</code></p>
  <p>HTML = <code><div>One <a href="/">Two</a></div></code></p>
 @return this (for chaining)
 - seealso: Node#unwrap
 */
- (OrgJsoupSelectElements *)unwrap;

/*!
 @brief Get the form element's value of the first matched element.
 @return The form element's value, or empty if not set.
 - seealso: Element#val()
 */
- (NSString *)val;

/*!
 @brief Set the form element's value in each of the matched elements.
 @param value The value to set into each matched element
 @return this (for chaining)
 */
- (OrgJsoupSelectElements *)valWithNSString:(NSString *)value;

/*!
 @brief Wrap the supplied HTML around each matched elements.For example, with HTML
      <code><p><b>This</b> is <b>Jsoup</b></p></code>,
      <code>doc.select("b").wrap("&lt;i&gt;&lt;/i&gt;");</code>
      becomes <code><p><i><b>This</b></i> is <i><b>jsoup</b></i></p></code>
 @param html HTML to wrap around each element, e.g. <code><div class="head"></div></code> . Can be arbitrarily deep.
 @return this (for chaining)
 - seealso: Element#wrap
 */
- (OrgJsoupSelectElements *)wrapWithNSString:(NSString *)html;

#pragma mark Package-Private

@end

J2OBJC_EMPTY_STATIC_INIT(OrgJsoupSelectElements)

FOUNDATION_EXPORT void OrgJsoupSelectElements_init(OrgJsoupSelectElements *self);

FOUNDATION_EXPORT OrgJsoupSelectElements *new_OrgJsoupSelectElements_init(void) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupSelectElements *create_OrgJsoupSelectElements_init(void);

FOUNDATION_EXPORT void OrgJsoupSelectElements_initWithInt_(OrgJsoupSelectElements *self, jint initialCapacity);

FOUNDATION_EXPORT OrgJsoupSelectElements *new_OrgJsoupSelectElements_initWithInt_(jint initialCapacity) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupSelectElements *create_OrgJsoupSelectElements_initWithInt_(jint initialCapacity);

FOUNDATION_EXPORT void OrgJsoupSelectElements_initWithJavaUtilCollection_(OrgJsoupSelectElements *self, id<JavaUtilCollection> elements);

FOUNDATION_EXPORT OrgJsoupSelectElements *new_OrgJsoupSelectElements_initWithJavaUtilCollection_(id<JavaUtilCollection> elements) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupSelectElements *create_OrgJsoupSelectElements_initWithJavaUtilCollection_(id<JavaUtilCollection> elements);

FOUNDATION_EXPORT void OrgJsoupSelectElements_initWithJavaUtilList_(OrgJsoupSelectElements *self, id<JavaUtilList> elements);

FOUNDATION_EXPORT OrgJsoupSelectElements *new_OrgJsoupSelectElements_initWithJavaUtilList_(id<JavaUtilList> elements) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupSelectElements *create_OrgJsoupSelectElements_initWithJavaUtilList_(id<JavaUtilList> elements);

FOUNDATION_EXPORT void OrgJsoupSelectElements_initWithOrgJsoupNodesElementArray_(OrgJsoupSelectElements *self, IOSObjectArray *elements);

FOUNDATION_EXPORT OrgJsoupSelectElements *new_OrgJsoupSelectElements_initWithOrgJsoupNodesElementArray_(IOSObjectArray *elements) NS_RETURNS_RETAINED;

FOUNDATION_EXPORT OrgJsoupSelectElements *create_OrgJsoupSelectElements_initWithOrgJsoupNodesElementArray_(IOSObjectArray *elements);

J2OBJC_TYPE_LITERAL_HEADER(OrgJsoupSelectElements)

#endif


#if __has_feature(nullability)
#pragma clang diagnostic pop
#endif
#pragma pop_macro("INCLUDE_ALL_OrgJsoupSelectElements")
